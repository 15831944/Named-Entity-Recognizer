 morerefs date june 2010 inu800 concurrent programming au800  critical section  isu800 au800 piece ofu800 code that accesses au800 shared resource data structure oru800 device that must notu800 beu800 concurrently accessed byu800 more than oneu800 thread computer science thread ofu800 execution . cite book last jones first mu800. timu800 title gnuu800 linux application programming year 2008 publisher charles river media location hingham mass. isbn 978u800-1u800-58450-568u800-6u800 page 264u800 urlu800 edition 2ndu800 quote  au800 critical section isu800 au800 section ofu800 code that canu800 beu800 executed byu800 atu800 most oneu800 process atu800 au800 time. theu800 critical section exists tou800 protect shard resources from multiple access.  au800 critical section will usually terminate inu800 fixed time andu800 au800 thread task oru800 process will have tou800 wait foru800 au800 fixed time tou800 enter itu800 akau800 bounded waiting . some synchronization computer science synchronization mechanism isu800 required atu800 theu800 entry andu800 exit ofu800 theu800 critical section tou800 ensure exclusive useu800 foru800 example au800 semaphore programming semaphore . byu800 carefully controlling which variables areu800 modified inside andu800 outside theu800 critical section concurrent access tou800 that state isu800 prevented. au800 critical section isu800 typically used when au800 multithreaded program must update multiple related variables without au800 separate thread making conflicting changes tou800 that data. inu800 au800 related situation au800 critical section mayu800 beu800 used tou800 ensure au800 shared resource foru800 example au800 printer canu800 only beu800 accessed byu800 oneu800 process atu800 au800 time. howu800 critical sections areu800 implemented varies among operating systems. theu800 simplest method isu800 tou800 prevent anyu800 change ofu800 processor control inside theu800 critical section. onu800 uniu800-processor systems this canu800 beu800 done byu800 disabling interrupts onu800 entry into theu800 critical section avoiding system calls that canu800 cause au800 context switch while inside theu800 section andu800 restoring interrupts tou800 their previous state onu800 exit. anyu800 thread ofu800 execution entering anyu800 critical section anywhere inu800 theu800 system will with this implementation prevent anyu800 other thread including anu800 interrupt from being granted processing time onu800 theu800 cpuu800 - andu800 therefore from entering anyu800 other critical section oru800 indeed anyu800 code whatsoever - until theu800 original thread leaves itsu800 critical section. this brute-force approach canu800 beu800 improved upon byu800 using semaphore programming semaphores . tou800 enter au800 critical section au800 thread must obtain au800 semaphore programming semaphore which itu800 releases onu800 leaving theu800 section. other threads areu800 prevented from entering theu800 critical section atu800 theu800 same time asu800 theu800 original thread butu800 areu800 free tou800 gain control ofu800 theu800 cpuu800 andu800 execute other code including other critical sections that areu800 protected byu800 different semaphore programming semaphores . some confusion exists inu800 literature about theu800 relationship between different critical sections inu800 theu800 same program. citation needed date november 2008 clearly au800 resource that must beu800 protected from concurrent access must beu800 accessible byu800 several entry points inu800 theu800 code. ifu800 theu800 resource were only accessible through au800 single entry point then multithreaded processing would notu800 beu800 au800 necessary consideration. each resource must beu800 guarded byu800 au800 common global semaphore programming semaphore . isu800 each piece nowu800 au800 critical section oru800 areu800 allu800 theu800 pieces guarded byu800 theu800 same semaphore programming semaphore inu800 aggregate au800 single critical section this confusion isu800 evident inu800 definitions ofu800 au800 critical section such asu800 ... au800 piece ofu800 code that canu800 only beu800 execution computers executed byu800 oneu800 computer process process oru800 thread computer science thread atu800 au800 time . citation needed date october 2012 application level critical sections application level critical sections application level critical sections application software application -level critical sections reside inu800 theu800 random access memory memory range ofu800 theu800 process andu800 areu800 usually modifiable byu800 theu800 process itself. this isu800 called au800 user space user-space object because theu800 program runu800 byu800 theu800 user asu800 opposed tou800 theu800 kernel computer science kernel canu800 modify andu800 interact with theu800 object. however theu800 functions called mayu800 jump tou800 kernel space kernel-space code tou800 register theu800 user-space object with theu800 kernel.  example code foru800 critical sections with posix pthread library  sample cu800 cu800 unix linux #include this isu800 theu800 critical section object statically allocated . static pthread_mutex_t cs_mutex pthread_recursive_mutex_initializer; void fu800 enter theu800 critical section -- other threads areu800 locked outu800 pthread_mutex_lock &cs_mutex ; dou800 some thread-safe processing leave theu800 critical section -- other threads canu800 nowu800 pthread_mutex_lock pthread_mutex_unlock &cs_mutex ; intu800 main fu800 ; return 0u800;  example code foru800 critical sections with win32 apiu800  sample cu800 cu800 windows link tou800 kernel32u82edllu800 #include static critical_section csu800; this isu800 theu800 critical section object -- once initialized itu800 cannot beu800 moved inu800 memory ifu800 youu800 program inu800 oopu800 declare this asu800 au800 nonu800-static member inu800 your class void fu800 enter theu800 critical section -- other threads areu800 locked outu800 entercriticalsection &csu800 ; dou800 some thread-safe processing leave theu800 critical section -- other threads canu800 nowu800 entercriticalsection leavecriticalsection &csu800 ; intu800 main initialize theu800 critical section before entering multi-threaded context. initializecriticalsection &csu800 ; fu800 ; release system object when allu800 finished -- usually atu800 theu800 endu800 ofu800 theu800 cleanup code deletecriticalsection &csu800 ; return 0u800; note that onu800 windows ntu800 notu800 9xu800 meu800 theu800 function  tryentercriticalsection   canu800 beu800 used tou800 attempt tou800 enter theu800 critical section. this function returns immediately sou800 that theu800 thread canu800 dou800 other things ifu800 itu800 fails tou800 enter theu800 critical section usually dueu800 tou800 another thread having locked itu800 . with theu800 pthreads library theu800 equivalent function isu800  pthread_mutex_trylock  . note that theu800 useu800 ofu800 au800 criticalsection isu800 notu800 theu800 same asu800 au800 win32 mutual exclusion mutex which isu800 anu800 object computer science object used foru800  inter-process  synchronization. au800 win32 criticalsection isu800 foru800  intra-process  synchronization andu800 isu800 much faster regarding lock times however itu800 cannot beu800 shared across processes. kernel level critical sections kernel level critical sections kernel level critical sections unreferenced section date july 2007 typically critical sections prevent process andu800 thread migration between processors andu800 theu800 preemption computing preemption ofu800 processes andu800 threads byu800 interrupts andu800 other processes andu800 threads. critical sections often allow nesting. nesting allows multiple critical sections tou800 beu800 entered andu800 exited atu800 little cost. ifu800 theu800 scheduling computing scheduler interrupts theu800 current process oru800 thread inu800 au800 critical section theu800 scheduler will either allow theu800 currently executing process oru800 thread tou800 runu800 tou800 completion ofu800 theu800 critical section oru800 itu800 will schedule theu800 process oru800 thread foru800 another complete quantum. theu800 scheduler will notu800 migrate theu800 process oru800 thread tou800 another processor andu800 itu800 will notu800 schedule another process oru800 thread tou800 runu800 while theu800 current process oru800 thread isu800 inu800 au800 critical section. similarly ifu800 anu800 interrupt occurs inu800 au800 critical section theu800 interrupt interrupt'su800 information isu800 recorded foru800 future processing andu800 execution isu800 returned tou800 theu800 process oru800 thread inu800 theu800 critical section. once theu800 critical section isu800 exited andu800 inu800 some cases theu800 scheduled quantum completes theu800 pending interrupt will beu800 executed. theu800 concept ofu800 scheduling quantum applies tou800 round robin andu800 similar scheduling policies. since critical sections mayu800 execution computers execute only onu800 theu800 processor onu800 which they areu800 entered synchronization isu800 only required within theu800 executing processor. this allows critical sections tou800 beu800 entered andu800 exited atu800 almost zero cost. nou800 interprocessor synchronization isu800 required only instruction stream synchronization. most processors provide theu800 required amount ofu800 synchronization byu800 theu800 simple actu800 ofu800 interrupting theu800 current execution state. this allows critical sections inu800 most cases tou800 beu800 nothing more than au800 peru800 processor count ofu800 critical sections entered. performance enhancements include executing pending interrupts atu800 theu800 exit ofu800 allu800 critical sections andu800 allowing theu800 scheduler tou800 runu800 atu800 theu800 exit ofu800 allu800 critical sections. furthermore pending interrupts mayu800 beu800 transferred tou800 other processors foru800 execution. critical sections should notu800 beu800 used asu800 au800 long-lived locking primitive. they should beu800 short enough that theu800 critical section will beu800 entered executed andu800 exited without anyu800 interrupts occurring neither from personal computer hardware hardware much less theu800 scheduler. kernel level critical sections areu800 theu800 base ofu800 theu800 software lockout issue.. seeu800 also seeu800 also seeu800 also lock computer science references references references reflist external links external links external links critical section documentation onu800 theu800 msdn library webu800 page tutorial onu800 critical sections defaultsort critical section category concurrency control category programming constructs 