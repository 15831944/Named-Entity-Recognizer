 oneu800 source date mayu800 2013 au800  relational database  isu800 au800 database that hasu800 au800 collection ofu800 table database tables ofu800 data items allu800 ofu800 which isu800 formally described andu800 organized according tou800 theu800 relational model . theu800 term isu800 inu800 contrast tou800 only oneu800 table asu800  theu800 database  andu800 inu800 contrast tou800 other models which also have many tables inu800 oneu800 database. inu800 theu800 relational model each table database schema schema must identify au800 column oru800 group ofu800 columns called theu800  primary keyu800  tou800 uniquely identify each rowu800. au800 relationship canu800 then beu800 established between each rowu800 inu800 theu800 table andu800 au800 rowu800 inu800 another table byu800 creating au800  foreign keyu800  au800 column oru800 group ofu800 columns inu800 oneu800 table that points tou800 theu800 primary keyu800 ofu800 another table. theu800 relational model offers various levels ofu800 refinement ofu800 table organization andu800 reorganization called database normalization . seeu800 #normalization normalization below. theu800 database management system dbms ofu800 au800 relational database isu800 called anu800 relational database management system rdbms andu800 isu800 theu800 software ofu800 au800 relational database. theu800 relational database wasu800 first defined inu800 june 1970 byu800 eu800u82efu800. codd edgar codd ofu800 ibmu800 ibmu800'su800 ibmu800 almaden research center sanu800 jose research laboratory . cite journal last codd first eu800u82efu800. year 1970 title au800 relational model ofu800 data foru800 large shared data banks urlu800 journal communications ofu800 theu800 acmu800 volume 13u800 issue 6u800 pages 377u8e28093387 doiu800 10u800u82e1145 362384u82e362685 codd codd'su800 view ofu800 what qualifies asu800 anu800 rdbms isu800 summarized inu800 codd codd'su800 12u800 rules . au800 relational database hasu800 become theu800 predominant choice inu800 storing data. other models besides theu800  relational model  include theu800 hierarchical database model andu800 theu800 network model . terminology terminology terminology image relational database termsu82esvgu800 350px thumb right relational database terminology. relational database theory uses mathematical terminology which areu800 roughly equivalent tou800 theu800 sqlu800 database terminology concerning  normalization . theu800 table below summarizes some ofu800 theu800 most important relational database terms andu800 their sqlu800 database equivalents. itu800 wasu800 first introduced inu800 1970 following theu800 work ofu800 eu800u82efu800u82ecodd. au800 rowu800 oru800 tuple hasu800 au800  relation  schema butu800 anu800 entire database hasu800 au800  relational  schema. class wikitable - sqlu800 relational database description - rowu800  tuple   data setu800  with specific instances inu800 theu800 range ofu800 each member - column name; column data  attribute  name; attribute value labeled member inu800 theu800 setu800 ofu800 elements common tou800 allu800  data sets ; au800 name word number phrase etcu800. - table relation database  relation  ; base relvar formal data structure - setu800 ofu800 column names relation scheme; setu800 ofu800 attributes au800 schema - view; query result; result setu800 derived relvar au800 data report from theu800 rdbms inu800 response tou800 au800 query relations oru800 tables relations oru800 tables relations oru800 tables main relation database table database au800   relation database relation   isu800 defined asu800 au800 setu800 ofu800 tuple tuples that have theu800 same attribute computing attributes . au800 tuple usually represents anu800 object andu800 information about that object. objects areu800 typically physical objects oru800 concepts. au800 relation isu800 usually described asu800 au800 table database table which isu800 organized into rowu800 database rows andu800 column database columns . allu800 theu800 data referenced byu800 anu800 attribute areu800 inu800 theu800 same domain mathematics domain andu800 conform tou800 theu800 same constraints. theu800 relational model specifies that theu800 tuples ofu800 au800 relation have nou800 specific order andu800 that theu800 tuples inu800 turn impose nou800 order onu800 theu800 attributes. applications access data byu800 specifying queries which useu800 operations such asu800  select  tou800 identify tuples  project  tou800 identify attributes andu800  join  tou800 combine relations. relations canu800 beu800 modified using theu800  insert   delete  andu800  update  operators. newu800 tuples canu800 supply explicit values oru800 beu800 derived from au800 query. similarly queries identify tuples foru800 updating oru800 deleting. tuples byu800 definition areu800 unique. ifu800 theu800 tuple contains au800 candidate keyu800 candidate oru800 primary keyu800 then obviously itu800 isu800 unique; however au800 primary keyu800 need notu800 beu800 defined foru800 au800 rowu800 oru800 record tou800 beu800 au800 tuple. theu800 definition ofu800 au800 tuple requires that itu800 beu800 unique butu800 does notu800 require au800 primary keyu800 tou800 beu800 defined. because au800 tuple isu800 unique itsu800 attributes byu800 definition constitute au800 superkey . base andu800 derived relations -- this section isu800 linked from relational database -- main relvar view database inu800 au800 relational database allu800 data areu800 stored andu800 accessed viau800 relation database relation relations. relations that store data areu800 called base relations andu800 inu800 implementations areu800 called tables . other relations dou800 notu800 store data butu800 areu800 computed byu800 applying relational operations tou800 other relations. these relations areu800 sometimes called derived relations . inu800 implementations these areu800 called view database views oru800 queries . derived relations areu800 convenient inu800 that they actu800 asu800 au800 single relation even though they mayu800 grab information from several relations. also derived relations canu800 beu800 used asu800 anu800 abstraction layer . domain domain domain main data domain au800 domain describes theu800 setu800 ofu800 possible values foru800 au800 given attribute andu800 canu800 beu800 considered au800 constraint onu800 theu800 value ofu800 theu800 attribute. mathematically attaching au800 domain tou800 anu800 attribute means that anyu800 value foru800 theu800 attribute must beu800 anu800 element ofu800 theu800 specified setu800. theu800 character data value 'abcu800' foru800 instance isu800 notu800 inu800 theu800 integer domain butu800 theu800 integer value 123u800 isu800 inu800 theu800 integer domain. constraints constraints constraints constraints make itu800 possible tou800 further restrict theu800 domain ofu800 anu800 attribute. foru800 instance au800 constraint canu800 restrict au800 given integer attribute tou800 values between 1u800 andu800 10u800. constraints provide oneu800 method ofu800 implementing business rules inu800 theu800 database. sqlu800 implements constraint functionality inu800 theu800 form ofu800 check constraint constraints. constraints restrict theu800 data that canu800 beu800 stored inu800 relation database relation relations. these areu800 usually defined using expressions that result inu800 au800 -- dou800 notu800 change theu800 capitalization ofu800 this link without first consulting andu800 replying tou800 theu800 talk page. anyu800 such edits will beu800 reverted. -- boolean data type boolean value indicating whether oru800 notu800 theu800 data satisfies theu800 constraint. constraints canu800 apply tou800 single attributes tou800 au800 tuple restricting combinations ofu800 attributes oru800 tou800 anu800 entire relation. since every attribute hasu800 anu800 associated domain there areu800 constraints  domain constraints  . theu800 twou800 principal rules foru800 theu800 relational model areu800 known asu800  entity integrity  andu800  referential integrity . primary keys primary keys primary keys main unique keyu800 au800 primary keyu800 uniquely specifies au800 tuple within au800 table. inu800 order foru800 anu800 attribute tou800 beu800 au800 good primary keyu800 itu800 must notu800 repeat. while natural attributes attributes used tou800 describe theu800 data being entered areu800 sometimes good primary keys surrogate keyu800 keys areu800 often used instead. au800 surrogate keyu800 isu800 anu800 artificial attribute assigned tou800 anu800 object which uniquely identifies itu800 foru800 instance inu800 au800 table ofu800 information about students atu800 au800 school they might allu800 beu800 assigned au800 student idu800 inu800 order tou800 differentiate them . theu800 surrogate keyu800 hasu800 nou800 intrinsic inherent meaning butu800 rather isu800 useful through itsu800 ability tou800 uniquely identify au800 tuple. another common occurrence especially inu800 regards tou800 nu800 mu800 cardinality isu800 theu800 compound keyu800 composite keyu800 . au800 composite keyu800 isu800 au800 keyu800 made upu800 ofu800 twou800 oru800 more attributes within au800 table that together uniquely identify au800 record. foru800 example inu800 au800 database relating students teachers andu800 classes. classes  could  beu800 uniquely identified byu800 au800 composite keyu800 ofu800 their room number andu800 time slot since nou800 other class could have exactly theu800 same combination ofu800 attributes. inu800 fact useu800 ofu800 au800 composite keyu800 such asu800 this canu800 beu800 au800 form ofu800 data verification albeit au800 weak oneu800. foreign keyu800 foreign keyu800 foreign keyu800 main foreign keyu800 au800 foreign keyu800 isu800 au800 field inu800 au800 relational table that matches theu800 primary keyu800 column ofu800 another table. theu800 foreign keyu800 canu800 beu800 used tou800 cross-reference tables. foreign keys need notu800 have unique values inu800 theu800 referencing relation. foreign keys effectively useu800 theu800 values ofu800 attributes inu800 theu800 referenced relation tou800 restrict theu800 domain ofu800 oneu800 oru800 more attributes inu800 theu800 referencing relation. au800 foreign keyu800 could beu800 described formally asu800 foru800 allu800 tuples inu800 theu800 referencing relation projected over theu800 referencing attributes there must exist au800 tuple inu800 theu800 referenced relation projected over those same attributes such that theu800 values inu800 each ofu800 theu800 referencing attributes match theu800 corresponding values inu800 theu800 referenced attributes. stored procedures stored procedures stored procedures main stored procedure au800 stored procedure isu800 executable code that isu800 associated with andu800 generally stored inu800 theu800 database. stored procedures usually collect andu800 customize common operations like inserting au800 tuple into au800 relation database relation gathering statistical information about usage patterns oru800 encapsulating complex business logic andu800 calculations. frequently they areu800 used asu800 anu800 application programming interface apiu800 foru800 security oru800 simplicity. implementations ofu800 stored procedures onu800 sqlu800 rdbmss often allow developers tou800 take advantage ofu800 procedural programming procedural extensions often vendor-specific tou800 theu800 standard declarative programming declarative sqlu800 syntax. stored procedures areu800 notu800 part ofu800 theu800 relational database model butu800 allu800 commercial implementations include them. index index index main index database anu800 index isu800 oneu800 wayu800 ofu800 providing quicker access tou800 data. indices canu800 beu800 created onu800 anyu800 combination ofu800 attributes onu800 au800 relation database relation . queries that filter using those attributes canu800 find matching tuples randomly using theu800 index without having tou800 check each tuple inu800 turn. this isu800 analogous tou800 using theu800 index publishing index ofu800 au800 book tou800 gou800 directly tou800 theu800 page onu800 which theu800 information youu800 areu800 looking foru800 isu800 found sou800 that youu800 dou800 notu800 have tou800 read theu800 entire book tou800 find what youu800 areu800 looking foru800. relational databases typically supply multiple indexing techniques each ofu800 which isu800 optimal foru800 some combination ofu800 data distribution relation size andu800 typical access pattern. indices areu800 usually implemented viau800 bu800 tree trees ru800-tree ru800-trees andu800 bitmap index bitmaps . indices areu800 usually notu800 considered part ofu800 theu800 database asu800 they areu800 considered anu800 implementation detail though indices areu800 usually maintained byu800 theu800 same group that maintains theu800 other parts ofu800 theu800 database. itu800 should beu800 noted that useu800 ofu800 efficient indexes onu800 both primary andu800 foreign keys canu800 dramatically improve query performance. this isu800 because bu800-tree indexes result inu800 query times proportional tou800 logu800 nu800 where nu800 isu800 theu800 number ofu800 rows inu800 au800 table andu800 hash indexes result inu800 constant time queries nou800 size dependency sou800 long asu800 theu800 relevant part ofu800 theu800 index fits into memory . relational operations relational operations relational operations main relational algebra queries made against theu800 relational database andu800 theu800 derived relvars inu800 theu800 database areu800 expressed inu800 au800 relational calculus oru800 au800 relational algebra . inu800 hisu800 original relational algebra codd introduced eight relational operators inu800 twou800 groups ofu800 four operators each. theu800 first four operators were based onu800 theu800 traditional mathematical setu800 theory setu800 operations theu800 union setu800 theory union operator combines theu800 tuples ofu800 twou800 relation database relation relations andu800 removes allu800 duplicate tuples from theu800 result. theu800 relational union operator isu800 equivalent tou800 theu800 union sqlu800 sqlu800 union operator. theu800 intersection setu800 theory intersection operator produces theu800 setu800 ofu800 tuples that twou800 relations share inu800 common. intersection isu800 implemented inu800 sqlu800 inu800 theu800 form ofu800 theu800 intersect sqlu800 intersect operator. theu800 complement setu800 theory difference operator acts onu800 twou800 relations andu800 produces theu800 setu800 ofu800 tuples from theu800 first relation that dou800 notu800 exist inu800 theu800 second relation. difference isu800 implemented inu800 sqlu800 inu800 theu800 form ofu800 theu800 except sqlu800 except oru800 minus operator. theu800 cartesian product ofu800 twou800 relations isu800 au800 join that isu800 notu800 restricted byu800 anyu800 criteria resulting inu800 every tuple ofu800 theu800 first relation being matched with every tuple ofu800 theu800 second relation. theu800 cartesian product isu800 implemented inu800 sqlu800 asu800 theu800 cross join cross join operator. theu800 remaining operators proposed byu800 codd involve special operations specific tou800 relational databases theu800 selection oru800 restriction operation retrieves tuples from au800 relation limiting theu800 results tou800 only those that meet au800 specific criterion iu800u82eeu800. au800 subset inu800 terms ofu800 setu800 theory. theu800 sqlu800 equivalent ofu800 selection isu800 theu800 select sqlu800 select query statement with au800 where sqlu800 where clause. theu800 projection relational algebra projection operation extracts only theu800 specified attributes from au800 tuple oru800 setu800 ofu800 tuples. theu800 join operation defined foru800 relational databases isu800 often referred tou800 asu800 au800 natural join. inu800 this type ofu800 join twou800 relations areu800 connected byu800 their common attributes. sqlu800 sqlu800'su800 approximation ofu800 au800 natural join isu800 theu800 inner join inner join operator. inu800 sqlu800 anu800 inner join prevents au800 cartesian product from occurring when there areu800 twou800 tables inu800 au800 query. foru800 each table added tou800 au800 sqlu800 query oneu800 additional inner join isu800 added tou800 prevent au800 cartesian product. thus foru800 nu800 tables inu800 au800 sqlu800 query there must beu800 nu800-1u800 inner joins tou800 prevent au800 cartesian product. theu800 relational algebra#division relational division operation isu800 au800 slightly more complex operation which involves essentially using theu800 tuples ofu800 oneu800 relation theu800 dividend tou800 partition au800 second relation theu800 divisor . theu800 relational division operator isu800 effectively theu800 opposite ofu800 theu800 cartesian product operator hence theu800 name . other operators have been introduced oru800 proposed since codd codd'su800 introduction ofu800 theu800 original eight including relational comparison operators andu800 extensions that offer support foru800 nesting andu800 hierarchical data among others. normalization normalization normalization main database normalization normalization wasu800 first proposed byu800 codd asu800 anu800 integral part ofu800 theu800 relational model. itu800 encompasses au800 setu800 ofu800 procedures designed tou800 eliminate nonsimple domains nonu800-atomic values andu800 theu800 redundancy duplication ofu800 data which inu800 turn prevents data manipulation anomalies andu800 loss ofu800 data integrity. theu800 most common forms ofu800 normalization applied tou800 databases areu800 called theu800 database normalization#normal forms normal form forms. references references references reflist databases defaultsort relational database category relational model category database theory category types ofu800 databases category english inventions category 1969 introductions 