 about theu800 wayu800 computers store files onu800 disk library andu800 office filing systems library classification inu800 computing au800  file system  oru800  filesystem  isu800 used tou800 control howu800 information isu800 stored andu800 retrieved. without au800 file system information placed inu800 au800 storage area would beu800 oneu800 large body ofu800 information with nou800 wayu800 tou800 tell where oneu800 piece ofu800 information stops andu800 theu800 next begins. byu800 separating theu800 information into individual pieces andu800 giving each piece au800 name theu800 information isu800 easily separated andu800 identified. taking itsu800 name from theu800 wayu800 paper based information systems areu800 named each piece ofu800 information isu800 called au800 computer file file . theu800 structure andu800 logic rules used tou800 manage theu800 groups ofu800 information andu800 their names isu800 called au800 file system . there areu800 many different kinds ofu800 file systems. each oneu800 hasu800 different structure andu800 logic. each oneu800 hasu800 different properties ofu800 speed flexibility security size andu800 more. some file systems have been designed tou800 beu800 used foru800 specific applications. foru800 example theu800 isou800 9660 file system isu800 designed specifically foru800 optical disks. file systems canu800 beu800 used onu800 many different kinds ofu800 storage devices. each storage device uses au800 different kind ofu800 media. theu800 most common storage device inu800 useu800 today isu800 au800 hard drive whose media isu800 au800 disc that hasu800 been coated with au800 magnetic film. theu800 film hasu800 ones andu800 zeros 'written' onu800 itu800 sending electrical pulses tou800 au800 magnetic read-write head. other media that areu800 used areu800 magnetic tape optical disc andu800 flash memory . inu800 some cases theu800 computer computer'su800 main memory ramu800 isu800 used tou800 create au800 temporary file system foru800 short term useu800. file systems areu800 used tou800 implement type ofu800 data store tou800 store retrieve andu800 update au800 setu800 ofu800 computer file file files. file system refers tou800 either theu800 abstract data structure structures used tou800 define files oru800 theu800 actual software oru800 firmware components that implement theu800 abstract ideas. some file systems areu800 used onu800 local data storage device devices; others provide file access viau800 au800 network protocol eu800u82egu800. network file system protocol nfsu800 server message block smbu800 oru800 9pu800 clients . some file systems areu800 virtual inu800 that theu800 files supplied areu800 computed onu800 request eu800u82egu800. procfs oru800 areu800 merely au800 mapping into au800 different file system used asu800 au800 backing store. theu800 file system manages access tou800 both theu800 content ofu800 files andu800 theu800 metadata about those files. itu800 isu800 responsible foru800 arranging storage space; reliability efficiency andu800 tuning with regard tou800 theu800 physical storage medium areu800 important design considerations. aspects ofu800 file systems aspects ofu800 file systems aspects ofu800 file systems space management space management space management  note this only applies tou800 file systems used inu800 storage devices.  file 100u800 000u800-files 5u800-bytes each -- 400u800 megs ofu800 slack spaceu82epngu800 frame example ofu800 slack space demonstrated with 4u800 096u800-byte ntfs clusters 100u800 000u800 files each 5u800 bytes peru800 file equals 500u800 000u800 bytes ofu800 actual data butu800 requires 409u800 600u800 000u800 bytes ofu800 disk space tou800 store -- theu800 size listing shown inu800 explorer isu800 oddly doubly-wrong. theu800 example files areu800 5u800 bytes each notu800 1ku800 andu800 theu800 clusters areu800 au800 minimum ofu800 4ku800 notu800 1ku800.-- file systems allocate space inu800 au800 granular manner usually multiple physical units onu800 theu800 device. theu800 file system isu800 responsible foru800 organizing computer file files andu800 directory file systems directories andu800 keeping track ofu800 which areas ofu800 theu800 media belong tou800 which file andu800 which areu800 notu800 being used. foru800 example inu800 apple dosu800 ofu800 theu800 early 1980s 256u800-byte sectors onu800 140u800 kilobyte floppy disk used au800  track sector mapu800 . citation needed date september 2012 this results inu800 unused space when au800 file isu800 notu800 anu800 exact multiple ofu800 theu800 allocation unit sometimes referred tou800 asu800  slack space . foru800 au800 512u800-byte allocation theu800 average unused space isu800 256u800 bytes. foru800 au800 64u800&nbsp;kbu800 clusters theu800 average unused space isu800 32kb. theu800 size ofu800 theu800 allocation unit isu800 chosen when theu800 file system isu800 created. choosing theu800 allocation size based onu800 theu800 average size ofu800 theu800 files expected tou800 beu800 inu800 theu800 file system canu800 minimize theu800 amount ofu800 unusable space. frequently theu800 default allocation mayu800 provide reasonable usage. choosing anu800 allocation size that isu800 toou800 small results inu800 excessive overhead ifu800 theu800 file system will contain mostly very large files. file system fragmentation occurs when unused space oru800 single files areu800 notu800 contiguous. asu800 au800 file system isu800 used files areu800 created modified andu800 deleted. when au800 file isu800 created theu800 file system allocates space foru800 theu800 data. some file systems permit oru800 require specifying anu800 initial space allocation andu800 subsequent incremental allocations asu800 theu800 file grows. asu800 files areu800 deleted theu800 space they were allocated eventually isu800 considered available foru800 useu800 byu800 other files. this creates alternating used andu800 unused areas ofu800 various sizes. this isu800 free space fragmentation. when au800 file isu800 created andu800 there isu800 notu800 anu800 area ofu800 contiguous space available foru800 itsu800 initial allocation theu800 space must beu800 assigned inu800 fragments. when au800 file isu800 modified such that itu800 becomes larger itu800 mayu800 exceed theu800 space initially allocated tou800 itu800 another allocation must beu800 assigned elsewhere andu800 theu800 file becomes fragmented. filenames filenames filenames main filename au800  filename  oru800  file name  isu800 used tou800 identify au800 storage location inu800 theu800 file system. most file systems have restrictions onu800 theu800 length ofu800 filenames. inu800 some file systems filenames areu800 notu800 case sensitivity case sensitive iu800u82eeu800. filenames such asu800 foou800 andu800 foou800 refer tou800 theu800 same file ; inu800 others filenames areu800 case sensitive iu800u82eeu800. theu800 names foou800 andu800 foou800 refer tou800 twou800 separate files . most modern file systems allow filenames tou800 contain au800 wide range ofu800 characters from theu800 unicode character setu800. most file system interface utilities however have restrictions onu800 theu800 useu800 ofu800 certain special characters disallowing them within filenames theu800 file system mayu800 useu800 these special characters tou800 indicate au800 device device type directory prefix oru800 file type . however these special characters might beu800 allowed byu800 foru800 example enclosing theu800 filename with double quotes . foru800 simplicity special characters areu800 generally discouraged within filenames. directories directories directories main directory file systems file systems typically have  directories  also called  folders  which allow theu800 user tou800 group files into separate collections. this mayu800 beu800 implemented byu800 associating theu800 file name with anu800 index inu800 au800 table ofu800 contents oru800 anu800 inode inu800 au800 unix-like file system. directory structures mayu800 beu800 flat iu800u82eeu800. linear oru800 allow hierarchies where directories mayu800 contain subdirectories. theu800 first file system tou800 support arbitrary hierarchies ofu800 directories wasu800 used inu800 theu800 multics operating system. cite conference urlu800 title au800 general-purpose file system foru800 secondary storage author ru800. cu800. daley coauthors pu800. gu800. neumann year 1965 conference fall joint computer conference publisher afips pages 213u8e28093229 doiu800 10u800u82e1145 1463891u82e1463915 accessdate 2011-07u800-30u800 theu800 native file systems ofu800 unix-like systems also support arbitrary directory hierarchies asu800 dou800 foru800 example apple incu800. apple 'su800 hierarchical file system andu800 itsu800 successor hfsu800 plus hfsu800 inu800 classic macu800 osu800 hfsu800 isu800 still used inu800 macu800 osu800 xu800 theu800 file allocation table fatu800 file system inu800 msu800-dosu800 2u800u82e0u800 andu800 later andu800 microsoft windows theu800 ntfs file system inu800 theu800 windows ntu800 family ofu800 operating systems andu800 theu800 odsu800-2u800 andu800 higher levels ofu800 theu800 files-11u800 file system inu800 openvms . metadata metadata metadata other bookkeeping information isu800 typically associated with each file within au800 file system. theu800 file size length ofu800 theu800 data contained inu800 au800 file mayu800 beu800 stored asu800 theu800 number ofu800 blocks allocated foru800 theu800 file oru800 asu800 au800 byte count. theu800 system time time that theu800 file wasu800 last modified mayu800 beu800 stored asu800 theu800 file file'su800 timestamp. file systems might store theu800 file creation time theu800 time itu800 wasu800 last accessed theu800 time theu800 file file'su800 metadata wasu800 changed oru800 theu800 time theu800 file wasu800 last backed upu800. other information canu800 include theu800 file file'su800 device file device type eu800u82egu800. block devices block character devices character internet socket socket subdirectory etcu800. itsu800 owner user computing user idu800 andu800 group computing group idu800 itsu800 file system permissions access permissions andu800 other file attribute attributes eu800u82egu800. whether theu800 file isu800 read-only executable etcu800. . au800 file system stores allu800 theu800 metadata associated with theu800 fileu8e28094including theu800 file name theu800 length ofu800 theu800 contents ofu800 au800 file andu800 theu800 location ofu800 theu800 file inu800 theu800 folder hierarchyu8e28094separate from theu800 contents ofu800 theu800 file. most file systems store theu800 names ofu800 allu800 theu800 files inu800 oneu800 directory inu800 oneu800 placeu8e28094the directory table foru800 that directoryu8e28094which isu800 often stored like anyu800 other file. many file systems putu800 only some ofu800 theu800 metadata foru800 au800 file inu800 theu800 directory table andu800 theu800 rest ofu800 theu800 metadata foru800 that file inu800 au800 completely separate structure such asu800 theu800 inode . most file systems also store metadata notu800 associated with anyu800 oneu800 particular file. such metadata includes information about unused regions -- free space bitmap block availability mapu800 u8e28094and information about badu800 sector sectors. often such information about au800 allocation group isu800 stored inside theu800 allocation group itself. additional attributes canu800 beu800 associated onu800 file systems such asu800 ntfs xfsu800 ext2 ext3 some versions ofu800 unix file system ufsu800 andu800 hfsu800 using extended file attributes . some file systems provide foru800 user defined attributes such asu800 theu800 author ofu800 theu800 document theu800 character encoding ofu800 au800 document oru800 theu800 size ofu800 anu800 image. some file systems allow foru800 different data collections tou800 beu800 associated with oneu800 file name. these separate collections mayu800 beu800 referred tou800 asu800  streams  oru800  forks . apple hasu800 long used au800 forked file system onu800 theu800 macintosh andu800 microsoft supports streams inu800 ntfs. some file systems maintain multiple past revisions ofu800 au800 file under au800 single file name; theu800 filename byu800 itself retrieves theu800 most recent version while prior saved version canu800 beu800 accessed using au800 special naming convention such asu800 filename;4u800 oru800 filename -4u800 tou800 access theu800 version four saves agou800. seeu800 comparison ofu800 file systems#metadata foru800 details onu800 which file systems support which kinds ofu800 metadata. file system asu800 anu800 abstract user interface file system asu800 anu800 abstract user interface file system asu800 anu800 abstract user interface inu800 some cases au800 file system mayu800 notu800 make useu800 ofu800 au800 storage device butu800 canu800 beu800 used tou800 organize andu800 represent access tou800 anyu800 data whether itu800 isu800 stored oru800 dynamically generated eu800u82egu800. procfs . utilities utilities utilities theu800 difference between au800 utility andu800 au800 built-inu800 core command function isu800 arbitrary depending onu800 theu800 design ofu800 theu800 operating system andu800 theu800 memory andu800 space limitations ofu800 theu800 hardware. foru800 example inu800 microsoft msu800-dosu800 formatting isu800 performed byu800 au800 utility andu800 simple file copying isu800 au800 built-inu800 command while inu800 theu800 apple dosu800 formatting isu800 au800 built-inu800 command butu800 simple file copying isu800 performed with au800 utility. file systems include utilities tou800 initialize alter parameters ofu800 andu800 remove anu800 instance ofu800 theu800 file system. some include theu800 ability tou800 extend oru800 truncate theu800 space allocated tou800 theu800 file system. directory utilities create rename andu800 delete directory entries andu800 alter metadata associated with au800 directory. they mayu800 include au800 means tou800 create additional links tou800 au800 directory hard link links inu800 unix rename parent links .. inu800 unix-like osu800 andu800 create bidirectional links tou800 files. file utilities create list copy move andu800 delete files andu800 alter metadata. they mayu800 beu800 able tou800 truncate data truncate oru800 extend space allocation append tou800 move andu800 modify files inu800-place. depending onu800 theu800 underlying structure ofu800 theu800 file system they mayu800 provide au800 mechanism tou800 prepend tou800 oru800 truncate from theu800 beginning ofu800 au800 file insert entries into theu800 middle ofu800 au800 file oru800 delete entries from au800 file. also inu800 this category areu800 utilities tou800 free space foru800 deleted files ifu800 theu800 file system provides anu800 undelete function. some file systems defer reorganization ofu800 free space secure erasing ofu800 free space andu800 rebuilding ofu800 hierarchical structures. they provide utilities tou800 perform these functions atu800 times ofu800 minimal activity. included inu800 this category isu800 theu800 infamous defragmentation utility. some ofu800 theu800 most important features ofu800 file system utilities involve supervisory activities which mayu800 involve bypassing ownership oru800 direct access tou800 theu800 underlying device. these include high-performance backup andu800 recovery data replication andu800 reorganization ofu800 various data structures andu800 allocation tables within theu800 file system. restricting andu800 permitting access restricting andu800 permitting access restricting andu800 permitting access -- toou800 many 'seeu800 also' links perhaps these should beu800 moved tou800 theu800 'seeu800 also' sect atu800 theu800 endu800 -- seeu800 also computer security password cracking filesystem-level encryption encrypting file system there areu800 several mechanisms used byu800 file systems tou800 control access tou800 data. usually theu800 intent isu800 tou800 prevent reading oru800 modifying files byu800 au800 user oru800 group ofu800 users. another reason isu800 tou800 ensure data isu800 modified inu800 au800 controlled wayu800 sou800 access mayu800 beu800 restricted tou800 au800 specific program. examples include passwords stored inu800 theu800 metadata ofu800 theu800 file oru800 elsewhere andu800 file permissions inu800 theu800 form ofu800 permission bits access control list lists oru800 capability computers capabilities . theu800 need foru800 file system utilities tou800 beu800 able tou800 access theu800 data atu800 theu800 media level tou800 reorganize theu800 structures andu800 provide efficient backup usually means that these areu800 only effective foru800 polite users butu800 areu800 notu800 effective against intruders. -- please donu800'tu800 make this article really bigu800 byu800 including allu800 theu800 issues ofu800 file security here. please addu800 itu800 tou800 au800 file system security article -- methods foru800 encrypting file data areu800 sometimes included inu800 theu800 file system. this isu800 very effective since there isu800 nou800 need foru800 file system utilities tou800 know theu800 encryption seed tou800 effectively manage theu800 data. theu800 risks ofu800 relying onu800 encryption include theu800 fact that anu800 attacker canu800 copy theu800 data andu800 useu800 brute force tou800 decrypt theu800 data. losing theu800 seed means losing theu800 data. maintaining integrity maintaining integrity maintaining integrity oneu800 significant responsibility ofu800 au800 file system isu800 tou800 ensure that regardless ofu800 theu800 actions byu800 programs accessing theu800 data theu800 structure remains consistent. this includes actions taken ifu800 au800 program modifying data terminates abnormally oru800 neglects tou800 inform theu800 file system that itu800 hasu800 completed itsu800 activities. this mayu800 include updating theu800 metadata theu800 directory entry andu800 handling anyu800 data that wasu800 buffered butu800 notu800 yetu800 updated onu800 theu800 physical storage media. other failures which theu800 file system must deal with include media failures oru800 loss ofu800 connection tou800 remote systems. inu800 theu800 event ofu800 anu800 operating system failure oru800 soft power failure special routines inu800 theu800 file system must beu800 invoked similar tou800 when anu800 individual program fails. theu800 file system must also beu800 able tou800 correct damaged structures. these mayu800 occur asu800 au800 result ofu800 anu800 operating system failure foru800 which theu800 osu800 wasu800 unable tou800 notify theu800 file system power failure oru800 reset. theu800 file system must also record events tou800 allow analysis ofu800 systemic issues asu800 well asu800 problems with specific files oru800 directories. user data user data user data theu800 most important purpose ofu800 au800 file system isu800 tou800 manage user data. this includes storing retrieving andu800 updating data. some file systems accept data foru800 storage asu800 au800 stream ofu800 bytes which areu800 collected andu800 stored inu800 au800 manner efficient foru800 theu800 media. when au800 program retrieves theu800 data itu800 specifies theu800 size ofu800 au800 memory buffer andu800 theu800 file system transfers data from theu800 media tou800 theu800 buffer. sometimes au800 runtime library routine mayu800 allow theu800 user program tou800 define au800  record  based onu800 au800 library call specifying au800 length. when theu800 user program reads theu800 data theu800 library retrieves data viau800 theu800 file system andu800 returns au800  record . some file systems allow theu800 specification ofu800 au800 fixed record length which isu800 used foru800 allu800 write andu800 reads. this facilitates updating records. anu800 identification foru800 each record also known asu800 au800 keyu800 makes foru800 au800 more sophisticated file system. theu800 user program canu800 read write andu800 update records without regard with their location. this requires complicated management ofu800 blocks ofu800 media usually separating keyu800 blocks andu800 data blocks. very efficient algorithms canu800 beu800 developed with pyramid structure foru800 locating records. using au800 file system using au800 file system using au800 file system utilities language specific runu800-time libraries andu800 user programs useu800 file system apiu800 apis tou800 make requests ofu800 theu800 file system. these include data transfer positioning updating metadata managing directories managing access specifications andu800 removal. multiple file systems within au800 single system multiple file systems within au800 single system multiple file systems within au800 single system frequently retail systems areu800 configured with au800 single file system occupying theu800 entire hard disk. another approach isu800 tou800 disk partitioning partition theu800 disk sou800 that several file systems with different attributes canu800 beu800 used. oneu800 file system foru800 useu800 asu800 browser cache might beu800 configured with au800 small allocation size. this hasu800 theu800 additional advantage ofu800 keeping theu800 frantic activity ofu800 creating andu800 deleting files typical ofu800 browser activity inu800 au800 narrow area ofu800 theu800 disk andu800 notu800 interfering with allocations ofu800 other files. au800 similar partition might beu800 created foru800 email. another partition andu800 file system might beu800 created foru800 theu800 storage ofu800 audio oru800 video files with au800 relatively large allocation. oneu800 ofu800 theu800 file systems mayu800 normally beu800 setu800  read-only  andu800 only periodically beu800 setu800 writable. au800 third approach which isu800 mostly used inu800 cloud systems isu800 tou800 useu800 disk images tou800 house additional file systems with theu800 same attributes oru800 notu800 within another host file system asu800 au800 file. au800 common example isu800 virtualization oneu800 user canu800 runu800 anu800 experimental linux distribution using theu800 ext4 file system inu800 au800 virtual machine under hisu800 heru800 production windows environment using ntfs . theu800 ext4 file system resides inu800 au800 disk image which isu800 treated asu800 au800 file oru800 multiple files depending onu800 theu800 hypervisor andu800 settings inu800 theu800 ntfs host file system. having multiple file systems onu800 au800 single system hasu800 theu800 additional benefit that inu800 theu800 event ofu800 au800 corruption ofu800 au800 single partition theu800 remaining file systems will frequently still beu800 intact. this includes virus destruction ofu800 theu800  system  partition oru800 even au800 system that will notu800 boot. file system utilities which require dedicated access canu800 beu800 effectively completed piecemeal. inu800 addition defragmentation mayu800 beu800 more effective. several system maintenance utilities such asu800 virus scans andu800 backups canu800 also beu800 processed inu800 segments. foru800 example itu800 isu800 notu800 necessary tou800 backup theu800 file system containing videos along with allu800 theu800 other files ifu800 none have been added since theu800 last backup. asu800 ofu800 theu800 image files oneu800 canu800 easily spin offu800 differential images which contain only newu800 data written tou800 theu800 master original image. differential images canu800 beu800 used foru800 both safety concerns asu800 au800 disposable system - canu800 beu800 quickly restored ifu800 destroyed oru800 contaminated byu800 au800 virus asu800 theu800 oldu800 image canu800 beu800 removed andu800 au800 newu800 image canu800 beu800 created inu800 matter ofu800 seconds even without automated procedures andu800 quick virtual machine deployment since theu800 differential images canu800 beu800 quickly spawned using au800 script inu800 batches design limitations design limitations design limitations allu800 file systems have some functional limit that defines theu800 maximum storable data capacity within that system. these functional limits areu800 au800 best-guess effort byu800 theu800 designer based onu800 howu800 large theu800 storage systems areu800 right nowu800 andu800 howu800 large storage systems areu800 likely tou800 become inu800 theu800 future. disk storage hasu800 continued tou800 increase atu800 near exponential growth exponential rates seeu800 moore moore'su800 lawu800 sou800 after au800 fewu800 years file systems have kept reaching design limitations that require computer users tou800 repeatedly move tou800 au800 newer system with ever-greater capacity. file system complexity typically varies proportionally with theu800 available storage capacity. theu800 file systems ofu800 early 1980s home computer computers with 50u800&nbsp;kbu800 tou800 512u800&nbsp;kbu800 ofu800 storage would notu800 beu800 au800 reasonable choice foru800 modern storage systems with hundreds ofu800 gigabytes ofu800 capacity. likewise modern file systems would notu800 beu800 au800 reasonable choice foru800 these early systems since theu800 complexity ofu800 modern file system structures would consume most oru800 allu800 ofu800 theu800 very limited capacity ofu800 theu800 early storage systems. types ofu800 file systems types ofu800 file systems types ofu800 file systems file system types canu800 beu800 classified into disk tape file systems network file systems andu800 special-purpose file systems. disk file systems disk file systems disk file systems au800  disk file system  takes advantages ofu800 theu800 ability ofu800 disk storage media tou800 randomly address data inu800 au800 short amount ofu800 time. additional considerations include theu800 speed ofu800 accessing data following that initially requested andu800 theu800 anticipation that theu800 following data mayu800 also beu800 requested. this permits multiple users oru800 processes access tou800 various data onu800 theu800 disk without regard tou800 theu800 sequential location ofu800 theu800 data. examples include file allocation table fatu800 fat12 fat16 fat32 exfat ntfs hierarchical file system hfsu800 andu800 hfsu800 plus hfsu800 hpfs unix file system ufsu800 ext2 ext3 ext4 xfsu800 btrfs isou800 9660 files-11u800 veritas file system vmfs zfsu800 reiserfs andu800 universal disk format udfu800 . some disk file systems areu800 journaling file system systems oru800 versioning file system systems. optical discs optical discs optical discs isou800 9660 andu800 universal disk format udfu800 areu800 twou800 common formats that target compact disc discs dvdu800 dvds andu800 bluu800-rayu800 discs. mount rainier packet writing mount rainier isu800 anu800 extension tou800 udfu800 supported byu800 linux 2u800u82e6u800 series andu800 windows vista that facilitates rewriting tou800 dvds. flash file systems flash file systems flash file systems main flash file system au800  flash file system  considers theu800 special abilities performance andu800 restrictions ofu800 flash memory devices. frequently au800 disk file system canu800 useu800 au800 flash memory device asu800 theu800 underlying storage media butu800 itu800 isu800 much better tou800 useu800 au800 file system specifically designed foru800 au800 flash device. tape file systems tape file systems tape file systems au800  tape file system  isu800 au800 file system andu800 tape format designed tou800 store files onu800 tape inu800 au800 self-describing form. magnetic tapes areu800 sequential storage media with significantly longer random data access times than disks posing challenges tou800 theu800 creation andu800 efficient management ofu800 au800 general-purpose file system. inu800 au800 disk file system there isu800 typically au800 master file directory andu800 au800 mapu800 ofu800 used andu800 free data regions. anyu800 file additions changes oru800 removals require updating theu800 directory andu800 theu800 used free maps. random access tou800 data regions isu800 measured inu800 milliseconds sou800 this system works well foru800 disks. tape requires linear motion tou800 wind andu800 unwind potentially very long reels ofu800 media. this tape motion mayu800 take several seconds tou800 several minutes tou800 move theu800 read write head from oneu800 endu800 ofu800 theu800 tape tou800 theu800 other. consequently au800 master file directory andu800 usage mapu800 canu800 beu800 extremely slow andu800 inefficient with tape. writing typically involves reading theu800 block usage mapu800 tou800 find free blocks foru800 writing updating theu800 usage mapu800 andu800 directory tou800 addu800 theu800 data andu800 then advancing theu800 tape tou800 write theu800 data inu800 theu800 correct spot. each additional file write requires updating theu800 mapu800 andu800 directory andu800 writing theu800 data which mayu800 take several seconds tou800 occur foru800 each file. tape file systems instead typically allow foru800 theu800 file directory tou800 beu800 spread across theu800 tape intermixed with theu800 data referred tou800 asu800  streaming  sou800 that time-consuming andu800 repeated tape motions areu800 notu800 required tou800 write newu800 data. however au800 side effect ofu800 this design isu800 that reading theu800 file directory ofu800 au800 tape usually requires scanning theu800 entire tape tou800 read allu800 theu800 scattered directory entries. most data archiving software that works with tape storage will store au800 local copy ofu800 theu800 tape catalog onu800 au800 disk file system sou800 that adding files tou800 au800 tape canu800 beu800 done quickly without having tou800 rescan theu800 tape media. theu800 local tape catalog copy isu800 usually discarded ifu800 notu800 used foru800 au800 specified period ofu800 time atu800 which point theu800 tape must beu800 reu800-scanned ifu800 itu800 isu800 tou800 beu800 used inu800 theu800 future. ibmu800 hasu800 developed au800 file system foru800 tape called theu800 linear tape file system . theu800 ibmu800 implementation ofu800 this file system hasu800 been released asu800 theu800 open-source linear tape file system#ibmu800 linear tape file system - single drive edition ibmu800 linear tape file system&nbsp;u8e28094 single drive edition ltfsu8e28094sde product. theu800 linear tape file system uses au800 separate partition onu800 theu800 tape tou800 record theu800 index meta-data thereby avoiding theu800 problems associated with scattering directory entries across theu800 entire tape. tape formatting tape formatting tape formatting writing data tou800 au800 tape isu800 often au800 significantly time-consuming process that mayu800 take several hours. similarly completely erasing oru800 formatting au800 tape canu800 also take several hours. with many data tape technologies itu800 isu800 notu800 necessary tou800 format theu800 tape before over-writing newu800 data tou800 theu800 tape. this isu800 dueu800 tou800 theu800 inherently destructive nature ofu800 overwriting data onu800 sequential media. because ofu800 theu800 time itu800 canu800 take tou800 format au800 tape typically tapes areu800 preu800-formatted sou800 that theu800 tape user does notu800 need tou800 spend time preparing each newu800 tape foru800 useu800. allu800 that isu800 usually necessary isu800 tou800 write anu800 identifying media label tou800 theu800 tape before useu800 andu800 even this canu800 beu800 automatically written byu800 software when au800 newu800 tape isu800 used foru800 theu800 first time. -- commented outu800 foru800 nowu800 since this hasu800 nothing tou800 dou800 with file systems dgerman tape booting tape booting tape booting tapes canu800 sometimes beu800 used tou800 boot au800 computer butu800 theu800 long random data access delays canu800 make this au800 very slow andu800 tedious process. theu800 boot-file storage canu800 beu800 optimized sou800 that program data isu800 stored inu800 theu800 order required foru800 useu800 with minimal need foru800 seeking. typically tape booting isu800 only used foru800 infrequent special purposes such asu800 operating system installation oru800 foru800 system recovery restore. -- database file systems database file systems database file systems another concept foru800 file management isu800 theu800 idea ofu800 au800 database-based file system. instead ofu800 oru800 inu800 addition tou800 hierarchical structured management files areu800 identified byu800 their characteristics like type ofu800 file topic author oru800 similar metadata computing rich metadata . ibmu800 db2u800 foru800 iu800 formerly known asu800 db2u800 400u800 andu800 db2u800 foru800 i5u800 osu800 isu800 au800 database file system asu800 part ofu800 theu800 object based ibmu800 iu800 operating system formerly known asu800 osu800 400u800 andu800 i5u800 osu800 incorporating au800 single level store andu800 running onu800 ibmu800 power systems formerly known asu800 asu800 400u800 andu800 iseries designed byu800 frank gu800. soltis ibmu800 ibmu800'su800 former chief scientist foru800 ibmu800 iu800. around 1978 tou800 1988 frank gu800. soltis andu800 hisu800 team atu800 ibmu800 rochester have successfully designed andu800 applied technologies like theu800 database file system where others like microsoft later failed tou800 accomplish. these technologies areu800 informally known asu800 'fortress rochester' andu800 were inu800 fewu800 basic aspects extended from early mainframe technologies butu800 inu800 many ways more advanced from au800 technology perspective. some other projects that aren'tu800 pure database file systems butu800 that useu800 some aspects ofu800 au800 database file system au800 lotu800 ofu800 webu800 content management system webu800-cmsu800 useu800 au800 database management system relational dbms tou800 store andu800 retrieve files. examples xhtml files areu800 stored asu800 xmlu800 oru800 text fields image files areu800 stored asu800 blob fields; sqlu800 select with optional xpath statements retrieve theu800 files andu800 allow theu800 useu800 ofu800 au800 sophisticated logic andu800 more rich information associations than usual file systems . very large file systems embodied byu800 applications like apache hadoop andu800 google file system useu800 some  database file system  concepts. transactional file systems transactional file systems transactional file systems some programs need tou800 update multiple files allu800 atu800 once . foru800 example au800 software installation mayu800 write program binaries libraries andu800 configuration files. ifu800 theu800 software installation fails theu800 program mayu800 beu800 unusable. ifu800 theu800 installation isu800 upgrading au800 keyu800 system utility such asu800 theu800 command shell computing shell theu800 entire system mayu800 beu800 left inu800 anu800 unusable state. transaction processing introduces theu800 isolation database systems isolation guarantee which states that operations within au800 transaction areu800 hidden from other threads onu800 theu800 system until theu800 transaction commits andu800 that interfering operations onu800 theu800 system will beu800 properly serialization serialized with theu800 transaction. transactions also provide theu800 atomicity programming atomicity guarantee that operations inside ofu800 au800 transaction areu800 either allu800 committed oru800 theu800 transaction canu800 beu800 aborted andu800 theu800 system discards allu800 ofu800 itsu800 partial results. this means that ifu800 there isu800 au800 crash oru800 power failure after recovery theu800 stored state will beu800 consistent. either theu800 software will beu800 completely installed oru800 theu800 failed installation will beu800 completely rolled back butu800 anu800 unusable partial install will notu800 beu800 left onu800 theu800 system. windows beginning with vista added transaction support tou800 ntfs inu800 au800 feature called transactional ntfs butu800 itsu800 useu800 isu800 nowu800 discouraged. there areu800 au800 number ofu800 research prototypes ofu800 transactional file systems foru800 unix systems including theu800 valor file system spillane richard; gaikwad sachin; chinni manjunath; zadok erez andu800 wright charles pu800.; 2009; enabling transactional file access viau800 lightweight kernel extensions ; seventh usenix conference onu800 file andu800 storage technologies fast 2009 amino wright charles pu800.; spillane richard; sivathanu gopalan; zadok erez; 2007; extending acid semantics tou800 theu800 file system ; acmu800 transactions onu800 storage lfsu800 selzter margo iu800.; 1993; transaction support inu800 au800 logu800-structured file system ; proceedings ofu800 theu800 ninth international conference onu800 data engineering andu800 au800 transactional ext3 file system onu800 theu800 txos kernel porter donald eu800.; hofmann owen su800.; rossbach christopher ju800.; benn alexander andu800 witchel emmett; 2009; operating system transactions ; inu800 theu800 proceedings ofu800 theu800 22nd acmu800 symposium onu800 operating systems principles sosp '09u800 bigu800 skyu800 mtu800 october 2009. asu800 well asu800 transactional file systems targeting embedded systems such asu800 tffs. galu800 eran; toledo sivan; au800 transactional flash file system foru800 microcontrollers ensuring consistency across multiple file system operations isu800 difficult ifu800 notu800 impossible without file system transactions. file locking canu800 beu800 used asu800 au800 concurrency control mechanism foru800 individual files butu800 itu800 typically does notu800 protect theu800 directory structure oru800 file metadata. foru800 instance file locking cannot prevent tocttou race conditions onu800 symbolic links. file locking also cannot automatically roll back au800 failed operation such asu800 au800 software upgrade; this requires atomicity. journaling file system systems areu800 oneu800 technique used tou800 introduce transaction-level consistency tou800 file system structures. journal transactions areu800 notu800 exposed tou800 programs asu800 part ofu800 theu800 osu800 apiu800; they areu800 only used internally tou800 ensure consistency atu800 theu800 granularity ofu800 au800 single system call. data backup systems typically dou800 notu800 provide support foru800 direct backup ofu800 data stored inu800 au800 transactional manner which makes recovery ofu800 reliable andu800 consistent data sets difficult. most backup software simply notes what files have changed since au800 certain time regardless ofu800 theu800 transactional state shared across multiple files inu800 theu800 overall dataset. asu800 au800 workaround some database systems simply produce anu800 archived state file containing allu800 data upu800 tou800 that point andu800 theu800 backup software only backs that upu800 andu800 does notu800 interact directly with theu800 active transactional databases atu800 allu800. recovery requires separate recreation ofu800 theu800 database from theu800 state file after theu800 file hasu800 been restored byu800 theu800 backup software. network file systems network file systems network file systems main distributed file system au800  network file system  isu800 au800 file system that acts asu800 au800 client foru800 au800 remote file access protocol providing access tou800 files onu800 au800 server. examples ofu800 network file systems include clients foru800 theu800 network file system protocol nfsu800 andrew file system afsu800 server message block smbu800 protocols andu800 file-system-like clients foru800 file transfer protocol ftpu800 andu800 webdav . shared disk file systems shared disk file systems shared disk file systems main shared disk file system au800  shared disk file system  isu800 oneu800 inu800 which au800 number ofu800 machines usually servers allu800 have access tou800 theu800 same external disk subsystem usually au800 sanu800 . theu800 file system arbitrates access tou800 that subsystem preventing write collisions. examples include gfs2 from redu800 hatu800 ibmu800 general parallel file system gpfs from ibmu800 sanu800 file system sfsu800 from dataplow cxfs from silicon graphics international sgiu800 andu800 stornext from quantum corporation . special file systems anchor special file system special file systems anchor special file system special file systems anchor special file system au800  special file system  presents nonu800-file elements ofu800 anu800 operating system asu800 files sou800 they canu800 beu800 acted onu800 using file system apis. this isu800 most commonly done inu800 unix-like operating systems butu800 devices areu800 given file names inu800 some nonu800-unix-like operating systems asu800 well. device file systems anchor device file system device file systems anchor device file system device file systems anchor device file system au800  device file system  represents iu800 ou800 devices andu800 pseudo-devices asu800 files called device file files. examples inu800 unix-like systems include devfs andu800 inu800 linux 2u800u82e6u800 systems udev . inu800 nonu800-unix-like systems such asu800 tops-10u800 andu800 other operating systems influenced byu800 itu800 where theu800 full filename oru800 pathname ofu800 au800 file canu800 include au800 device prefix devices other than those containing file systems areu800 referred tou800 byu800 au800 device prefix specifying theu800 device without anything following itu800. other special file systems other special file systems other special file systems inu800 theu800 linux kernel configfs andu800 sysfs provide files that canu800 beu800 used tou800 query theu800 kernel foru800 information andu800 configure entities inu800 theu800 kernel. procfs maps processes andu800 onu800 linux other operating system structures into au800 filespace. -- isu800 this really relevant deep space science exploration craft like voyager iu800 andu800 voyager iiu800 iiu800 used magnetic tape data storage digital tape -based special file systems. most modern space exploration craft like cassini-huygens used real-time operating system file systems oru800 rtos influenced file systems. theu800 mars rover rovers areu800 oneu800 such example ofu800 anu800 rtos file system important inu800 this case because they areu800 implemented inu800 flash memory . -- minimal file system audio-cassette storage minimal file system audio-cassette storage minimal file system audio-cassette storage inu800 theu800 late 1970s hobbyists sawu800 theu800 development ofu800 theu800 microcomputer . disk andu800 digital tape devices were toou800 expensive foru800 hobbyists. anu800 inexpensive basic data storage system wasu800 devised that used common audio cassette tape. when theu800 system needed tou800 write data theu800 user wasu800 notified tou800 press record onu800 theu800 cassette recorder then press return onu800 theu800 keyboard tou800 notify theu800 system that theu800 cassette recorder wasu800 recording. theu800 system wrote au800 sound tou800 provide time synchronization then kansas city standard modulated sounds that encoded au800 prefix theu800 data au800 checksum andu800 au800 suffix. when theu800 system needed tou800 read data theu800 user wasu800 instructed tou800 press play onu800 theu800 cassette recorder. theu800 system would  listen  tou800 theu800 sounds onu800 theu800 tape waiting until au800 burst ofu800 sound could beu800 recognized asu800 theu800 synchronization. theu800 system would then interpret subsequent sounds asu800 data. when theu800 data read wasu800 complete theu800 system would notify theu800 user tou800 press stop onu800 theu800 cassette recorder. itu800 wasu800 primitive butu800 itu800 worked au800 lotu800 ofu800 theu800 time . data wasu800 stored sequentially usually inu800 anu800 unnamed format although some systems such asu800 theu800 commodore petu800 series ofu800 computers didu800 allow theu800 files tou800 beu800 named. multiple sets ofu800 data could beu800 written andu800 located byu800 fast-forwarding theu800 tape andu800 observing atu800 theu800 tape counter tou800 find theu800 approximate start ofu800 theu800 next data region onu800 theu800 tape. theu800 user might have tou800 listen tou800 theu800 sounds tou800 find theu800 right spot tou800 begin playing theu800 next data region. some implementations even included audible sounds interspersed with theu800 data. flat file systems flat file systems flat file systems inu800 au800 flat file system there areu800 nou800 subdirectory subdirectories . when floppy disk media wasu800 first available this type ofu800 file system wasu800 adequate dueu800 tou800 theu800 relatively small amount ofu800 data space available. cpu800 mu800 machines featured au800 flat file system where files could beu800 assigned tou800 oneu800 ofu800 16u800  user areas  andu800 generic file operations narrowed tou800 work onu800 oneu800 instead ofu800 defaulting tou800 work onu800 allu800 ofu800 them. these user areas were nou800 more than special attributes associated with theu800 files that isu800 itu800 wasu800 notu800 necessary tou800 define specific quota foru800 each ofu800 these areas andu800 files could beu800 added tou800 groups foru800 asu800 long asu800 there wasu800 still free storage space onu800 theu800 disk. theu800 apple macintosh also featured au800 flat file system theu800 macintosh file system . itu800 wasu800 unusual inu800 that theu800 file management program macintosh finder created theu800 illusion ofu800 au800 partially hierarchical filing system onu800 topu800 ofu800 emfs. this structure required every file tou800 have au800 unique name even ifu800 itu800 appeared tou800 beu800 inu800 au800 separate folder. while simple flat file systems become awkward asu800 theu800 number ofu800 files grows andu800 makes itu800 difficult tou800 organize data into related groups ofu800 files. au800 recent addition tou800 theu800 flat file system family isu800 amazonu82ecomu800 amazon 'su800 amazon s3u800 s3u800 au800 remote storage service which isu800 intentionally simplistic tou800 allow users theu800 ability tou800 customize howu800 their data isu800 stored. theu800 only constructs areu800 buckets imagine au800 disk drive ofu800 unlimited size andu800 objects similar butu800 notu800 identical tou800 theu800 standard concept ofu800 au800 file . advanced file management isu800 allowed byu800 being able tou800 useu800 nearly anyu800 character including ' ' inu800 theu800 object object'su800 name andu800 theu800 ability tou800 select subsets ofu800 theu800 bucket bucket'su800 content based onu800 identical prefixes. file systems andu800 operating systems file systems andu800 operating systems file systems andu800 operating systems many operating system systems include support foru800 more than oneu800 file system. sometimes theu800 osu800 andu800 theu800 file system areu800 sou800 tightly interwoven itu800 isu800 difficult tou800 separate outu800 file system functions. there needs tou800 beu800 anu800 interface provided byu800 theu800 operating system software between theu800 user andu800 theu800 file system. this interface canu800 beu800 textual such asu800 provided byu800 au800 command line interface such asu800 theu800 unix shell oru800 digital command language openvms dclu800 oru800 graphical such asu800 provided byu800 au800 graphical user interface such asu800 file browser browsers . ifu800 graphical theu800 metaphor ofu800 theu800   folder computing folder   containing documents other files andu800 nested folders isu800 often used seeu800 also directory file systems directory andu800 folder . unix-like operating systems unix-like operating systems unix-like operating systems unix-like operating systems create au800 virtual file system which makes allu800 theu800 files onu800 allu800 theu800 devices appear tou800 exist inu800 au800 single hierarchy. this means inu800 those systems there isu800 oneu800 root directory andu800 every file existing onu800 theu800 system isu800 located under itu800 somewhere. unix-like systems canu800 useu800 au800 ramu800 disk oru800 network shared resource asu800 itsu800 root directory. unix-like systems assign au800 device name tou800 each device butu800 this isu800 notu800 howu800 theu800 files onu800 that device areu800 accessed. instead tou800 gain access tou800 files onu800 another device theu800 operating system must first beu800 informed where inu800 theu800 directory tree those files should appear. this process isu800 called mount computing mounting au800 file system. foru800 example tou800 access theu800 files onu800 au800 cdu800-romu800 oneu800 must tell theu800 operating system take theu800 file system from this cdu800-romu800 andu800 make itu800 appear under such-andu800-such directory . theu800 directory given tou800 theu800 operating system isu800 called theu800   mount point  &nbsp;u8e28093 itu800 might foru800 example beu800 media . theu800 media directory exists onu800 many unix systems asu800 specified inu800 theu800 filesystem hierarchy standard andu800 isu800 intended specifically foru800 useu800 asu800 au800 mount point foru800 removable media such asu800 cdsu800 dvds usbu800 drives oru800 floppy disks. itu800 mayu800 beu800 empty oru800 itu800 mayu800 contain subdirectories foru800 mounting individual devices. generally only theu800 system administrator administrator iu800u82eeu800. root user mayu800 authorize theu800 mounting ofu800 file systems. unix-like operating systems often include software andu800 tools that assist inu800 theu800 mounting process andu800 provide itu800 newu800 functionality. some ofu800 these strategies have been coined auto-mounting asu800 au800 reflection ofu800 their purpose. # inu800 many situations file systems other than theu800 root need tou800 beu800 available asu800 soon asu800 theu800 operating system hasu800 booting booted . allu800 unix-like systems therefore provide au800 facility foru800 mounting file systems atu800 boot time. system administrator administrators define these file systems inu800 theu800 configuration file fstab  vfstab  inu800 solaris operating system solaris which also indicates options andu800 mount points. # inu800 some situations there isu800 nou800 need tou800 mount certain file systems atu800 booting boot time although their useu800 mayu800 beu800 desired thereafter. there areu800 some utilities foru800 unix-like systems that allow theu800 mounting ofu800 predefined file systems upon demand. # removable media have become very common with microcomputer platforms. they allow programs andu800 data tou800 beu800 transferred between machines without au800 physical connection. common examples include usbu800 flash drive drives cdu800-romu800 cdu800-roms andu800 dvdu800 dvds. utilities have therefore been developed tou800 detect theu800 presence andu800 availability ofu800 au800 medium andu800 then mount that medium without anyu800 user intervention. -- supermount definition mayu800 beu800 inaccurate -- -- there mayu800 beu800 some concepts iu800 forgot omitted didu800 notu800 know amu800 notu800 creative enough tou800 invent -- # progressive unix-like systems have also introduced au800 concept called  supermounting ; seeu800 foru800 example theu800 linux supermount-ngu800 project . foru800 example au800 floppy disk that hasu800 been supermounted canu800 beu800 physically removed from theu800 system. under normal circumstances theu800 disk should have been synchronized andu800 then unmounted before itsu800 removal. provided synchronization hasu800 occurred au800 different disk canu800 beu800 inserted into theu800 drive. theu800 system automatically notices that theu800 disk hasu800 changed andu800 updates theu800 mount point contents tou800 reflect theu800 newu800 medium. similar functionality isu800 found onu800 windows machines. # anu800 automounter will automatically mount au800 file system when au800 reference isu800 made tou800 theu800 directory atop which itu800 should beu800 mounted. this isu800 usually used foru800 file systems onu800 network servers rather than relying onu800 events such asu800 theu800 insertion ofu800 media asu800 would beu800 appropriate foru800 removable media. linux linux linux linux supports many different file systems butu800 common choices foru800 theu800 system disk onu800 au800 block device include theu800 extu800 family such asu800 ext2 ext3 andu800 ext4 xfsu800 jfsu800 file system jfsu800 reiserfs andu800 btrfs . foru800 rawu800 flash without au800 flash translation layer ftlu800 oru800 memory technology device mtdu800 there isu800 ubifs jffs2 andu800 yaffs among others. squashfs isu800 au800 common compressed read-only file system. solaris solaris solaris theu800 sunu800 microsystems solaris operating system inu800 earlier releases defaulted tou800 nonu800-journaled oru800 nonu800-logging unix file system ufsu800 foru800 bootable andu800 supplementary file systems. solaris defaulted tou800 supported andu800 extended ufsu800. support foru800 other file systems andu800 significant enhancements were added over time including veritas software corp. journaling vxfs sunu800 microsystems clustering qfsu800 sunu800 microsystems journaling ufsu800 andu800 sunu800 microsystems open source poolable 128u800 bitu800 compressible andu800 error-correcting zfsu800 . kernel extensions were added tou800 solaris tou800 allow foru800 bootable veritas vxfs operation. logging oru800 journaling file system journaling wasu800 added tou800 ufsu800 inu800 sunu800 sunu800'su800 solaris 7u800 . releases ofu800 solaris 10u800 solaris express opensolaris andu800 other open source variants ofu800 theu800 solaris operating system later supported bootable zfsu800 . logical volume management allows foru800 spanning au800 file system across multiple devices foru800 theu800 purpose ofu800 adding redundancy capacity andu800 oru800 throughput. legacy environments inu800 solaris mayu800 useu800 solaris volume manager formerly known asu800 solstice disksuite . multiple operating systems including solaris mayu800 useu800 veritas volume manager . modern solaris based operating systems eclipse theu800 need foru800 volume management through leveraging virtual storage pools inu800 zfsu800 . osu800 xu800 osu800 xu800 osu800 xu800 osu800 xu800 uses au800 file system that itu800 inherited from classic macu800 osu800 called hfsu800 plus sometimes called  macu800 osu800 extended . citation needed date september 2012 hfsu800 plus isu800 au800 metadata computing metadata -rich andu800 case preservation case-preserving butu800 usually case sensitivity case-insensitive file system. dueu800 tou800 theu800 unix roots ofu800 osu800 xu800 unix permissions were added tou800 hfsu800 plus. later versions ofu800 hfsu800 plus added journaling file system journaling tou800 prevent corruption ofu800 theu800 file system structure andu800 introduced au800 number ofu800 optimizations tou800 theu800 allocation algorithms inu800 anu800 attempt tou800 defragment files automatically without requiring anu800 external defragmenter. filenames canu800 beu800 upu800 tou800 255u800 characters. hfsu800 plus uses unicode tou800 store filenames. onu800 osu800 xu800 theu800 file format filetype canu800 come from theu800 type code stored inu800 file file'su800 metadata oru800 theu800 filename extension . hfsu800 plus hasu800 three kinds ofu800 links unix-style hard link links unix-style symbolic link links andu800 alias macu800 osu800 aliases . aliases areu800 designed tou800 maintain au800 link tou800 their original file even ifu800 they areu800 moved oru800 renamed; they areu800 notu800 interpreted byu800 theu800 file system itself butu800 byu800 theu800 file manager code inu800 userland computing userland . osu800 xu800 also supports theu800 unix file system ufsu800 file system derived from theu800 bsdu800 unix fast file system viau800 nextstep . however asu800 ofu800 macu800 osu800 xu800 10u800u82e5u800 leopard osu800 xu800 canu800 nou800 longer beu800 installed onu800 au800 ufsu800 volume noru800 canu800 au800 preu800-leopard system installed onu800 au800 ufsu800 volume beu800 upgraded tou800 leopard. macu800 osu800 xu800 10u800u82e5u800 leopard installing onu800 au800 ufsu800-formatted volume newer versions ofu800 osu800 xu800 areu800 capable ofu800 reading andu800 writing tou800 theu800 legacy file allocation table fatu800 file systems 16u800 & 32u800 common onu800 windows. they areu800 also capable ofu800  reading  theu800 newer ntfs file systems foru800 windows. inu800 order tou800  write  tou800 ntfs file systems onu800 osu800 xu800 versions prior tou800 10u800u82e6u800 snow leopard third party software isu800 necessary. macu800 osu800 xu800 10u800u82e6u800 snow leopard andu800 later allows writing tou800 ntfs file systems butu800 only after au800 nonu800-trivial system setting change third party software exists that automates this . citation needed date september 2012 pcu800-bsdu800 pcu800-bsdu800 pcu800-bsdu800 pcu800-bsdu800 isu800 au800 desktop version ofu800 freebsd which inherits freebsd 'su800 zfsu800 support similarly tou800 freenas . theu800 newu800 graphical installer ofu800 pcu800-bsdu800 canu800 handle   root directory root onu800 zfsu800  andu800 raid-zu800 pool installs andu800 disk encryption using geli software geli right from theu800 start inu800 anu800 easy convenient guiu800 wayu800. theu800 current pcu800-bsdu800 9u800u82e0u800 'isotope edition' hasu800 zfsu800 filesystem version 5u800 andu800 zfsu800 storage pool version 28u800. plan 9u800 plan 9u800 plan 9u800 plan 9u800 from bell labs treats  everything  asu800 au800 file andu800 accessed asu800 au800 file would beu800 iu800u82eeu800. nou800 ioctl oru800 mmap networking graphics debugging authentication capabilities encryption andu800 other services areu800 accessed viau800 iu800-ou800 operations onu800 file descriptor descriptors. theu800 9pu800 protocol removes theu800 difference between local andu800 remote files. these file systems areu800 organized with theu800 help ofu800 private peru800-process namespaces allowing each process tou800 have au800 different view ofu800 theu800 many file systems that provide resources inu800 au800 distributed system. theu800 inferno operating system inferno operating system shares these concepts with plan 9u800. microsoft windows microsoft windows microsoft windows file directorylisting1u82epngu800 thumb right 300px directory listing inu800 au800 microsoft windows windows command shell windows makes useu800 ofu800 theu800 file allocation table fatu800 ntfs exfat andu800 refs file systems theu800 latter isu800 only supported andu800 usable inu800 windows server 2012 ; windows cannot boot from itu800 . windows uses au800   drive letter   abstraction atu800 theu800 user level tou800 distinguish oneu800 disk oru800 partition from another. foru800 example theu800 path computing path cu800 windows represents au800 directory windows onu800 theu800 partition represented byu800 theu800 letter cu800. drive cu800 isu800 most commonly used foru800 theu800 primary hard disk partition since atu800 theu800 advent ofu800 hard disks many computers hadu800 twou800 floppy drives au800 andu800 bu800 onu800 which windows isu800 usually installed andu800 from which itu800 boots. this tradition hasu800 become sou800 firmly ingrained that bugs exist inu800 many applications which make assumptions that theu800 drive that theu800 operating system isu800 installed onu800 isu800 cu800. theu800 useu800 ofu800 drive letters andu800 theu800 tradition ofu800 using cu800 asu800 theu800 drive letter foru800 theu800 primary hard disk partition canu800 beu800 traced tou800 msu800-dosu800 where theu800 letters au800 andu800 bu800 were reserved foru800 upu800 tou800 twou800 floppy disk drives. this inu800 turn derived from cpu800 mu800 inu800 theu800 1970s andu800 ultimately from ibmu800 ibmu800'su800 cpu800 cmsu800 ofu800 1967. fatu800 fatu800 fatu800 main file allocation table theu800 family ofu800 file allocation table fatu800 file systems isu800 supported byu800 almost allu800 operating systems foru800 personal computers including allu800 versions ofu800 microsoft windows windows andu800 msu800-dosu800 pcu800&nbsp;dosu800 andu800 dru800-dosu800 . pcu800&nbsp;dosu800 isu800 anu800 oemu800 version ofu800 msu800-dosu800 msu800-dosu800 wasu800 originally based onu800 seattle computer products scpu800 'su800 86u800-dosu800 . dru800-dosu800 wasu800 based onu800 digital research 'su800 concurrent dosu800 au800 successor ofu800 cpu800 mu800-86u800 . theu800 fatu800 file systems areu800 therefore well-suited asu800 au800 universal exchange format between computers andu800 devices ofu800 most anyu800 type andu800 ageu800. theu800 fatu800 file system traces itsu800 roots back tou800 anu800 incompatible 8u800-bitu800 fatu800 precursor inu800 stand-alone disk basic andu800 theu800 short-lived midas operating system mdos midas project. citation needed date september 2012 over theu800 years theu800 file system hasu800 been expanded from fat12 tou800 fat16 andu800 fat32 . various features have been added tou800 theu800 file system including subdirectory subdirectories codepage support extended attribute attributes andu800 long filenames . third-parties such asu800 digital research have incorporated optional support foru800 deletion tracking andu800 volume directory file-based multi-user security schemes tou800 support file andu800 directory passwords andu800 permissions such asu800 read write execute delete access rights. most ofu800 these extensions areu800 notu800 supported byu800 windows. theu800 fat12 andu800 fat16 file systems hadu800 au800 limit onu800 theu800 number ofu800 entries inu800 theu800 root directory ofu800 theu800 file system andu800 hadu800 restrictions onu800 theu800 maximum size ofu800 fatu800-formatted disks oru800 partition computing partitions . fat32 addresses theu800 limitations inu800 fat12 andu800 fat16 except foru800 theu800 file size limit ofu800 close tou800 4u800&nbsp;gbu800 butu800 itu800 remains limited compared tou800 ntfs. fat12 fat16 andu800 fat32 also have au800 limit ofu800 eight characters foru800 theu800 file name andu800 three characters foru800 theu800 extension such asu800 .exeu800 . this isu800 commonly referred tou800 asu800 theu800 8u800u82e3u800 filename limit. vfat anu800 optional extension tou800 fat12 fat16 andu800 fat32 introduced inu800 windows 95u800 andu800 windows ntu800 3u800u82e5u800 allowed long file names long file name lfnu800 tou800 beu800 stored inu800 theu800 fatu800 file system inu800 au800 backwards compatible fashion. ntfs ntfs ntfs main ntfs ntfs introduced with theu800 windows ntu800 operating system allowed access control list aclu800 -based permission control. other features also supported byu800 ntfs include hard links multiple file streams attribute indexing quota tracking sparse files encryption compression andu800 reparse points directories working asu800 mount-points foru800 other file systems symlinks junctions remote storage links though notu800 allu800 these features areu800 well-documented. citation needed date january 2011 exfat exfat exfat main exfat exfat isu800 au800 proprietary andu800 patent-protected file system with certain advantages over ntfs with regard tou800 file system overhead . exfat isu800 notu800 backwards compatible with fatu800 file systems such asu800 fat12 fat16 oru800 fat32. theu800 file system isu800 supported with newer windows systems such asu800 windows 2003 windows vista windows 2008 windows 7u800 windows 8u800 andu800 more recently support hasu800 been added foru800 windows xpu800. microsoft winxp exfat patch support inu800 other operating systems isu800 sparse since microsoft hasu800 notu800 published theu800 specifications ofu800 theu800 file system andu800 implementing support foru800 exfat requires au800 license. openvms openvms openvms main files-11u800 mvsu800 ibmu800 mainframe mvsu800 ibmu800 mainframe mvsu800 ibmu800 mainframe main mvsu800#mvsu800 filesystem other file systems other file systems other file systems theu800 prospero file system isu800 au800 file system based onu800 theu800 virtual system model. theu800 prospero file system au800 global file system based onu800 theu800 virtual system model theu800 system wasu800 created byu800 dru800. bu800. clifford neuman ofu800 theu800 information sciences institute atu800 theu800 university ofu800 southern california. csu800u82eucsbu82eeduu800 flex machine#rsre flex computer system rsre flex file system - written inu800 algol 68u800 theu800 file system ofu800 theu800 michigan terminal system mtsu800 isu800 interesting because iu800 itu800 provides line files where record lengths andu800 line numbers areu800 associated asu800 metadata with each record inu800 theu800 file lines canu800 beu800 added replaced updated with theu800 same oru800 different length records andu800 deleted anywhere inu800 theu800 file without theu800 need tou800 read andu800 rewrite theu800 entire file; iiu800 using program keys files mayu800 beu800 shared oru800 permitted tou800 commands andu800 programs inu800 addition tou800 users andu800 groups; andu800 iiiu800 there isu800 au800 comprehensive file locking mechanism that protects both theu800 file file'su800 data andu800 itsu800 metadata. au800 file system foru800 au800 general-purpose time-sharing environment gu800. cu800. pirkola  proceedings ofu800 theu800 ieee  june 1975 volume 63u800 nou800. 6u800 ppu800.&nbsp;918u8e28093924 issn 0018-9219 theu800 protection ofu800 information inu800 au800 general purpose time-sharing environment gary cu800. pirkola andu800 john sanguinetti  proceedings ofu800 theu800 ieee symposium onu800 trends andu800 applications 1977 computer security andu800 integrity  volu800. 10u800 nou800. 4u800 ppu800. 106u800-114u800 limitations limitations limitations converting theu800 type ofu800 au800 file system converting theu800 type ofu800 au800 file system converting theu800 type ofu800 au800 file system itu800 mayu800 beu800 advantageous oru800 necessary tou800 have files inu800 au800 different file system than they currently exist. reasons include theu800 need foru800 anu800 increase inu800 theu800 space requirements beyond theu800 limits ofu800 theu800 current file system. theu800 depth ofu800 path mayu800 need tou800 beu800 increased beyond theu800 restrictions ofu800 theu800 file system. there mayu800 beu800 performance oru800 reliability considerations. providing access tou800 another operating system which does notu800 support existing file system isu800 another reason. inu800-place conversion inu800-place conversion inu800-place conversion inu800 some cases conversion canu800 beu800 done inu800-place although migrating theu800 file system isu800 more conservative asu800 itu800 involves au800 creating au800 copy ofu800 theu800 data andu800 isu800 recommended. howu800 tou800 convert fatu800 disks tou800 ntfs microsoft october 25u800 2001 onu800 windows fatu800 andu800 fat32 file systems canu800 beu800 converted tou800 ntfs viau800 theu800 convertu82eexeu800 utility butu800 notu800 theu800 reverse. onu800 linux ext2 canu800 beu800 converted tou800 ext3 andu800 converted back andu800 ext3 canu800 beu800 converted tou800 ext4 butu800 notu800 back converting anu800 ext3 filesystem tou800 ext4 andu800 both ext3 andu800 ext4 canu800 beu800 converted tou800 btrfs andu800 converted back until theu800 undo information isu800 deleted. conversion from ext3 btrfs wiki these conversions areu800 possible dueu800 tou800 using theu800 same format foru800 theu800 file data itself andu800 relocating theu800 metadata into empty space inu800 some cases using sparse file support. migrating tou800 au800 different file system migrating tou800 au800 different file system migrating tou800 au800 different file system migration hasu800 theu800 disadvantage ofu800 requiring additional space although itu800 mayu800 beu800 faster. theu800 best case isu800 ifu800 there isu800 unused space onu800 media which will contain theu800 final file system. foru800 example tou800 migrate au800 fat32 file system tou800 anu800 ext2 file system. first create au800 newu800 ext2 file system then copy theu800 data tou800 theu800 file system then delete theu800 fat32 file system. anu800 alternative when there isu800 notu800 sufficient space tou800 retain theu800 original file system until theu800 newu800 oneu800 isu800 created isu800 tou800 useu800 au800 work area such asu800 au800 removable media . this takes longer butu800 au800 backup ofu800 theu800 data isu800 au800 nice side effect. long file paths andu800 long file names long file paths andu800 long file names long file paths andu800 long file names inu800 hierarchical file systems files areu800 accessed byu800 means ofu800 au800   path computing path   that isu800 au800 branching list ofu800 directories containing theu800 file. different file systems have different limits onu800 theu800 depth ofu800 theu800 path. file systems also have au800 limit onu800 theu800 length ofu800 anu800 individual filename. copying files with long names oru800 located inu800 paths ofu800 significant depth from oneu800 file system tou800 another mayu800 cause undesirable results. this depends onu800 howu800 theu800 utility doing theu800 copying handles theu800 discrepancy. seeu800 also seeu800 also seeu800 also comparison ofu800 file systems list ofu800 file systems list ofu800 unix programs directory structure disk sharing distributed file system file manager file system fragmentation filename extension global filesystem physical andu800 logical storage opera file system storage efficiency virtual file system references references references --seeu800 foru800 anu800 explanation ofu800 howu800 tou800 generate footnotes using theu800 tags-- cited references cited references cited references reflist colwidth 30em general references general references general references refbegin colwidth 40em cite webu800 accessdate february 9u800 2005 urlu800 author jonathan deu800 boyne pollard title disc andu800 volume size limits work frequently given answers year 1996 cite webu800 accessdate february 9u800 2005 urlu800 title osu800 2u800 corrective service fixu800 jr09427 author ibmu800 work cite webu800 accessdate february 9u800 2005 urlu800 title attribute - ea_information 0xd0 work ntfs information linux-ntfs project cite webu800 accessdate february 9u800 2005 urlu800 title attribute - eau800 0xe0 work ntfs information linux-ntfs project cite webu800 accessdate february 21u800 2005 urlu800 title attribute - standard_information 0x10 work ntfs information linux-ntfs project cite webu800 accessdate mayu800 2u800 2006 urlu800 title technical note tn1150 hfsu800 plus volume format author apple computer incu800 work detailed hfsu800 plus andu800 hfsx description file system forensic analysis brian carrier addison wesley 2005. refend further reading further reading further reading books books books refbegin colwidth 40em cite book first brian last carrier title file system forensic analysis publisher addison-wesley year 2005 isbn 0u800-321u800-26817-2u800 urlu800 cite book first helen last custer title inside theu800 windows ntu800 file system publisher microsoft press year 1994 isbn 1u800-55615-660u800-xu800 cite book first dominic last giampaolo title practical file system design with theu800 beu800 file system publisher morgan kaufmann publishers year 1999 format pdfu800 isbn 1u800-55860-497u800-9u800 urlu800 accessdate 2010-01u800-22u800 cite book first kirby last mccoy title vmsu800 file system internals series vaxu800 - vmsu800 series publisher digital press year 1990 isbn 1u800-55558-056u800-4u800 cite book first stan last mitchell title inside theu800 windows 95u800 file system publisher ou800'reilly media ou800'reilly year 1997 isbn 1u800-56592-200u800-xu800 urlu800 cite book first rajeev last nagar title windows ntu800 file system internals au800 developer developer'su800 guide publisher ou800'reilly media ou800'reilly year 1997 isbn 978u800-1u800-56592-249u800-5u800 urlu800 cite book first steve du800. last pate title unix filesystems evolution design andu800 implementation publisher john wiley & sons wiley year 2003 isbn 0u800-471u800-16483-6u800 urlu800 cite book first mendel last rosenblum title theu800 design andu800 implementation ofu800 au800 logu800-structured file system series theu800 springer international series inu800 engineering andu800 computer science publisher springer year 1994 isbn 0u800-7923-9541-7u800 cite book first1 mark last1 russinovich first2 david au800. last2 solomon first3 alex last3 ionescu chapter file systems title windows internals edition 5thu800 publisher microsoft press year 2009 isbn 0u800-7356-2530-1u800 prabhakaran vijayan 2006 .  iron file systems  . phdu800 disseration university ofu800 wisconsin-madison. cite book first1 abraham last1 silberschatz first2 peter baer last2 galvin first3 greg last3 gagne chapter storage management title operating system concepts edition 7thu800 publisher wiley year 2004 isbn 0u800-471u800-69466-5u800 cite book first andrew su800. last tanenbaum authorlink andrew tanenbaum title modern operating systems edition 3rdu800 publisher prentice hall year 2007 isbn 0u800-13u800-600663-9u800 urlu800 cite book first1 andrew su800. last1 tanenbaum authorlink1 andrew tanenbaum first2 albert su800. last2 woodhull title operating systems design andu800 implementation edition 3rdu800 publisher prentice hall year 2006 isbn 0u800-13u800-142938-8u800 urlu800 refend online online online refbegin colwidth 40em benchmarking filesystems outdated byu800 justin piszcz linux gazette 102u800 mayu800 2004 benchmarking filesystems part iiu800 using kernel 2u800u82e6u800 byu800 justin piszcz linux gazette 122u800 january 2006 filesystems ext3 reiserfs xfsu800 jfsu800 comparison onu800 debian etch 2006 interview with theu800 people behind jfsu800 reiserfs & xfsu800 journal file system performance outdated reiserfs jfsu800 andu800 ext3fs show their merits onu800 au800 fast raid appliance journaled filesystem benchmarks outdated au800 comparison ofu800 reiserfs xfsu800 jfsu800 ext3 & ext2 large list ofu800 file system summaries most recent update 2006-11u800-19u800 linux file system benchmarks v2u800u82e6u800 kernel with au800 stress onu800 cpuu800 usage linux filesystem benchmarks linux large file support outdated local filesystems foru800 windows overview ofu800 some filesystems outdated sparse files support outdated cite news title from bfsu800 tou800 zfsu800 past present andu800 future ofu800 file systems urlu800 author jeremy reimer date march 16u800 2008 publisher arstechnicau82ecomu800 accessdate 2008-03u800-18u800 refend external links external links external links wikibooks guide tou800 unix explanations filesystems andu800 swap filesystems andu800 swap commons category file systems filesystem specifications - links & whitepapers interesting file system projects defaultsort file system category computer file systems 