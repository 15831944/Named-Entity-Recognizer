 au800  database  isu800 anu800 organized collection ofu800 data computing data . theu800 data areu800 typically organized tou800 model relevant aspects ofu800 reality inu800 au800 wayu800 that supports processes requiring this information. foru800 example modeling theu800 availability ofu800 rooms inu800 hotels inu800 au800 wayu800 that supports finding au800 hotel with vacancies. database management systems dbmss areu800 specially designed applications that interact with theu800 user other applications andu800 theu800 database itself tou800 capture andu800 analyze data. au800 general-purpose  database management system dbms   isu800 au800 computer software software system designed tou800 allow theu800 definition creation querying update andu800 administration ofu800 databases. well-known dbmss include mysql postgresql sqlite microsoft sqlu800 server microsoft access oracle database oracle sapu800 agu800 sapu800 dbase foxpro ibmu800 db2u800 libreoffice base andu800 filemakerpro filemaker prou800 . au800 database isu800 notu800 generally software portability portable across different dbms butu800 different dbmss canu800 interoperation inter-operate byu800 using technical standard standard standards such asu800 sqlu800 andu800 odbc oru800 jdbc tou800 allow au800 single application tou800 work with more than oneu800 database. terminology andu800 overview terminology andu800 overview terminology andu800 overview formally theu800 term database refers tou800 theu800 data itself andu800 supporting data structures . databases areu800 created tou800 operate large quantities ofu800 information byu800 inputting storing retrieving andu800 managing that information. databases areu800 setu800 upu800 sou800 that oneu800 setu800 ofu800 software programs provides allu800 users with access tou800 allu800 theu800 data. au800 database management system dbms isu800 au800 suite ofu800 computer software providing theu800 interface between users andu800 au800 database oru800 databases. because they areu800 sou800 closely related theu800 term database when used casually often refers tou800 both au800 dbms andu800 theu800 data itu800 manipulates. outside theu800 world ofu800 professional information technology theu800 term  database  isu800 sometimes used casually tou800 refer tou800 anyu800 collection ofu800 data perhaps au800 spreadsheet maybe even au800 card index . this article isu800 concerned only with databases where theu800 size andu800 usage requirements necessitate useu800 ofu800 au800 database management system. jeffrey ullman 1997  first course inu800 database systems  prentice-hall incu800. simon & schuster page 1u800 isbn 0u800-13u800-861337-0u800. theu800 interactions catered foru800 byu800 most existing dbms fall into four main groups data definition. defining newu800 data structures foru800 au800 database removing data structures from theu800 database modifying theu800 structure ofu800 existing data. update. inserting modifying andu800 deleting data. retrieval. obtaining information either foru800 endu800-user queries andu800 reports oru800 foru800 processing byu800 applications. administration. registering andu800 monitoring users enforcing data security monitoring performance maintaining data integrity dealing with concurrency control andu800 data recovery recovering information ifu800 theu800 system fails. au800 dbms isu800 responsible foru800 maintaining theu800 integrity andu800 security ofu800 stored data andu800 foru800 recovering information ifu800 theu800 system fails. both au800 database andu800 itsu800 dbms conform tou800 theu800 principles ofu800 au800 particular database model . tsitchizris du800. cu800. andu800 fu800. hu800. lochovsky 1982 .  data models.  englewood-cliffs prentice-hall. database system refers collectively tou800 theu800 database model database management system andu800 database. beynon-davies pu800. 2004 .  database systems  3rdu800 edition. palgrave basingstoke uku800. isbn 1u800-4039-1601-2u800 physically database servers areu800 dedicated computers that hold theu800 actual databases andu800 runu800 only theu800 dbms andu800 related software. database servers areu800 usually multiprocessor computers with generous memory andu800 redundant array ofu800 independent disks raid disk arrays used foru800 stable storage. raid isu800 used foru800 recovery ofu800 data ifu800 anyu800 ofu800 theu800 disks fails. hardware database accelerators connected tou800 oneu800 oru800 more servers viau800 au800 high-speed channel areu800 also used inu800 large volume transaction processing environments. dbmss areu800 found atu800 theu800 heart ofu800 most database application applications. dbmss mayu800 beu800 built around au800 custom computer multitasking multitasking kernel computing kernel with built-inu800 computer network networking support butu800 modern dbmss typically rely onu800 au800 standard operating system tou800 provide these functions. citation needed date april 2010 since dbmss comprise au800 significant economy economical market computer andu800 storage vendors often take into account dbms requirements inu800 their ownu800 development plans. citation needed date march 2013 databases andu800 dbmss canu800 beu800 categorized according tou800 theu800 database model su800 that they support such asu800 relational oru800 xmlu800 theu800 type su800 ofu800 computer they runu800 onu800 from au800 server cluster tou800 au800 mobile phone theu800 query language su800 used tou800 access theu800 database such asu800 sqlu800 oru800 xquery andu800 their internal engineering which affects performance scalability resilience andu800 security. applications andu800 roles applications andu800 roles applications andu800 roles unreferenced section date march 2013 most organizations inu800 developed countries today depend onu800 databases foru800 their business operations . increasingly databases areu800 notu800 only used tou800 support theu800 internal operations ofu800 theu800 organization butu800 also tou800 underpin itsu800 online interactions with customers andu800 suppliers seeu800 enterprise software . databases areu800 notu800 used only tou800 hold administrative information butu800 areu800 often embedded within applications tou800 hold more specialized data foru800 example engineering data oru800 economic models. examples ofu800 database applications include computerized library systems flight reservation system systems andu800 computerized parts inventory system systems. client-server oru800 database transaction transactional dbmss areu800 often complex tou800 maintain high itu800 performance management performance availability andu800 security when many users areu800 querying andu800 updating theu800 database atu800 theu800 same time. personal desktop-based database systems tend tou800 beu800 less complex. foru800 example filemaker andu800 microsoft access come with built-inu800 graphical user interface interfaces. general-purpose andu800 special-purpose dbmss general-purpose andu800 special-purpose dbmss general-purpose andu800 special-purpose dbmss au800 dbms hasu800 evolved into au800 complex software system andu800 itsu800 development typically requires thousands ofu800 person-years ofu800 development effort. cite webu800 urlu800 title introduction tou800 db2u800 date 3u800 july 2008 accessdate 17u800 march 2013 author raul fu800. chong michael dang dwaine ru800. snow xiaomei wang . this article quotes au800 development time ofu800 5u800 years involving 750u800 people foru800 db2u800 release 9u800 alone some general-purpose dbmss such asu800 adabas oracle andu800 db2u800 have been undergoing upgrades since theu800 1970s. general-purpose dbmss aimu800 tou800 meet theu800 needs ofu800 asu800 many applications asu800 possible which adds tou800 theu800 complexity. however theu800 fact that their development cost canu800 beu800 spread over au800 large number ofu800 users means that they areu800 often theu800 most cost-effective approach. however au800 general-purpose dbms isu800 notu800 always theu800 optimal solution inu800 some cases au800 general-purpose dbms mayu800 introduce unnecessary overhead. therefore there areu800 many examples ofu800 systems that useu800 special-purpose databases. au800 common example isu800 anu800 email system email systems areu800 designed tou800 optimize theu800 handling ofu800 email messages andu800 dou800 notu800 need significant portions ofu800 au800 general-purpose dbms functionality. many databases have application software that accesses theu800 database onu800 behalf ofu800 endu800-users without exposing theu800 dbms interface directly. application programmers mayu800 useu800 au800 wire protocol directly oru800 more likely through anu800 application programming interface . database designers andu800 database administrators interact with theu800 dbms through dedicated interfaces tou800 build andu800 maintain theu800 applications databases andu800 thus need some more knowledge andu800 understanding about howu800 dbmss operate andu800 theu800 dbmss external interfaces andu800 tuning parameters. general-purpose databases areu800 usually developed byu800 oneu800 organization oru800 community ofu800 programmers while au800 different group builds theu800 applications that useu800 itu800. inu800 many companies specialized database administrator administrators maintain databases runu800 reports andu800 mayu800 work onu800 code that runs onu800 theu800 databases themselves rather than inu800 theu800 client application . history history history with theu800 progress inu800 technology inu800 theu800 areas ofu800 processors computer memory computer storage andu800 computer networks theu800 sizes capabilities andu800 performance ofu800 databases andu800 their respective dbmss have grown inu800 orders ofu800 magnitudes. theu800 development ofu800 database technology canu800 beu800 divided into three eras based onu800 database model data model oru800 structure navigational database navigational citation author cu800. wu800. bachmann title theu800 programmer asu800 navigator date november 1973 journal cacm urlu800 turing award lecture 1973 sqlu800 relational database relational andu800 post-relational. theu800 twou800 main early navigational data models were theu800 hierarchical database model hierarchical model epitomized byu800 ibmu800 ibmu800'su800 imsu800 system andu800 theu800 codasyl model network model implemented inu800 au800 number ofu800 products such asu800 idms . theu800 relational model first proposed inu800 1970 byu800 edgar fu800. codd departed from this tradition byu800 insisting that applications should search foru800 data byu800 content rather than byu800 following links. theu800 relational model isu800 made upu800 ofu800 ledger-style tables each used foru800 au800 different type ofu800 entity. itu800 wasu800 notu800 until theu800 midu800-1980s that computing hardware became powerful enough tou800 allow relational systems dbmss plus applications tou800 beu800 widely deployed. byu800 theu800 early 1990s however relational systems were dominant foru800 allu800 large-scale data processing applications andu800 they remain dominant today 2013 except inu800 niche areas. theu800 dominant database language isu800 theu800 standard sqlu800 foru800 theu800 relational model which hasu800 influenced database languages foru800 other data models. citation needed date march 2013 object database databases were invented inu800 theu800 1980s tou800 overcome theu800 inconvenience ofu800 object-relational impedance mismatch which ledu800 tou800 theu800 coining ofu800 theu800 term post-relational butu800 also development ofu800 hybrid object-relational database databases. theu800 next generation ofu800 post-relational databases inu800 theu800 2000s became known asu800 nosql databases introducing fast keyu800-value store stores andu800 document-oriented database databases. au800 competing next generation known asu800 newsql databases attempted newu800 implementations that retained theu800 relational sqlu800 model while aiming tou800 match theu800 high performance ofu800 nosql compared tou800 commercially available relational dbmss. 1960s navigational dbms 1960s navigational dbms 1960s navigational dbms file codasylbu82epngu800 thumb 280px basic structure ofu800 navigational codasyl database model. further navigational database theu800 introduction ofu800 theu800 term  database  coincided with theu800 availability ofu800 direct-access storage disks andu800 drums from theu800 midu800-1960s onwards. theu800 term represented au800 contrast with theu800 tape-based systems ofu800 theu800 past allowing shared interactive useu800 rather than daily batch processing. theu800 oxford english dictionary cites cite webu800 title database nu800 urlu800 work oedu800 online publisher oxford university press accessdate july 12u800 2013 month june year 2013 au800 1962 report byu800 theu800 system development corporation ofu800 california asu800 theu800 first tou800 useu800 theu800 term data-base inu800 au800 specific technical sense. asu800 computers grew inu800 speed andu800 capability au800 number ofu800 general-purpose database systems emerged; byu800 theu800 midu800-1960s there were au800 number ofu800 such systems inu800 commercial useu800. interest inu800 au800 standard began tou800 grow andu800 charles bachman author ofu800 oneu800 such product theu800 integrated data store idsu800 founded theu800 database task group within codasyl theu800 group responsible foru800 theu800 creation andu800 standardization ofu800 cobol . inu800 1971 they delivered their standard which generally became known asu800 theu800 codasyl approach andu800 soon au800 number ofu800 commercial products based onu800 this approach were made available. theu800 codasyl approach wasu800 based onu800 theu800 manual navigation ofu800 au800 linked data setu800 which wasu800 formed into au800 large network. records could beu800 found either byu800 useu800 ofu800 au800 primary keyu800 known asu800 au800 calc keyu800 typically implemented byu800 hashing byu800 navigating relationships called sets from oneu800 record tou800 another oru800 byu800 scanning allu800 theu800 records inu800 sequential order. later systems added bu800-trees tou800 provide alternate access paths. many codasyl databases also added au800 query language that wasu800 very straightforward. however inu800 theu800 final tally codasyl wasu800 very complex andu800 required significant training andu800 effort tou800 produce useful applications. international business machines ibmu800 also hadu800 their ownu800 dbms system inu800 1968 known asu800  imsu800 . information management system imsu800 wasu800 au800 development ofu800 software written foru800 theu800 apollo program onu800 theu800 system 360u800 . imsu800 wasu800 generally similar inu800 concept tou800 codasyl butu800 used au800 strict hierarchy foru800 itsu800 model ofu800 data navigation instead ofu800 codasyl codasyl'su800 network model. both concepts later became known asu800 navigational database databases dueu800 tou800 theu800 wayu800 data wasu800 accessed andu800 bachman bachman'su800 1973 turing award presentation wasu800  theu800 programmer asu800 navigator . imsu800 isu800 classified asu800 au800 hierarchical database . idms andu800 cincom systems ' cincom systems#1970s total database areu800 classified asu800 network model network databases . 1970s relational dbms 1970s relational dbms 1970s relational dbms edgar codd worked atu800 international business machines ibmu800 inu800 sanu800 jose california inu800 oneu800 ofu800 their offshoot offices that wasu800 primarily involved inu800 theu800 development ofu800 hard disk systems. heu800 wasu800 unhappy with theu800 navigational model ofu800 theu800 codasyl approach notably theu800 lack ofu800 au800 search facility. inu800 1970 heu800 wrote au800 number ofu800 papers that outlined au800 newu800 approach tou800 database construction that eventually culminated inu800 theu800 groundbreaking  au800 relational model ofu800 data foru800 large shared data banks . codd eu800u82efu800. 1970 . au800 relational model ofu800 data foru800 large shared data banks . inu800  communications ofu800 theu800 acmu800  13u800 6u800 377u8e28093387. inu800 this paper heu800 described au800 newu800 system foru800 storing andu800 working with large databases. instead ofu800 records being stored inu800 some sort ofu800 linked list ofu800 free-form records asu800 inu800 codasyl codd codd'su800 idea wasu800 tou800 useu800 au800 table database table ofu800 fixed-length records with each table used foru800 au800 different type ofu800 entity. au800 linked-list system would beu800 very inefficient when storing sparse databases where some ofu800 theu800 data foru800 anyu800 oneu800 record could beu800 left empty. theu800 relational model solved this byu800 splitting theu800 data into au800 series ofu800 normalized tables oru800  relations  with optional elements being moved outu800 ofu800 theu800 main table tou800 where they would take upu800 room only ifu800 needed. data mayu800 beu800 freely inserted deleted andu800 edited inu800 these tables with theu800 dbms doing whatever maintenance needed tou800 present au800 table view tou800 theu800 application user. image relational keyu800u82epngu800 thumb 300px inu800 theu800 relational model related records areu800 linked together with au800 keyu800 theu800 relational model also allowed theu800 content ofu800 theu800 database tou800 evolve without constant rewriting ofu800 links andu800 pointers. theu800 relational part comes from entities referencing other entities inu800 what isu800 known asu800 oneu800-tou800-many relationship like au800 traditional hierarchical model andu800 many-tou800-many relationship like au800 navigational network model. thus au800 relational model canu800 express both hierarchical andu800 navigational models asu800 well asu800 itsu800 native tabular model allowing foru800 pure oru800 combined modeling inu800 terms ofu800 these three models asu800 theu800 application requires. foru800 instance au800 common useu800 ofu800 au800 database system isu800 tou800 track information about users their name login information various addresses andu800 phone numbers. inu800 theu800 navigational approach allu800 ofu800 these data would beu800 placed inu800 au800 single record andu800 unused items would simply notu800 beu800 placed inu800 theu800 database. inu800 theu800 relational approach theu800 data would beu800  normalized  into au800 user table anu800 address table andu800 au800 phone number table foru800 instance . records would beu800 created inu800 these optional tables only ifu800 theu800 address oru800 phone numbers were actually provided. linking theu800 information back together isu800 theu800 keyu800 tou800 this system. inu800 theu800 relational model some bitu800 ofu800 information wasu800 used asu800 au800 primary keyu800 keyu800 uniquely defining au800 particular record. when information wasu800 being collected about au800 user information stored inu800 theu800 optional tables would beu800 found byu800 searching foru800 this keyu800. foru800 instance ifu800 theu800 login name ofu800 au800 user isu800 unique addresses andu800 phone numbers foru800 that user would beu800 recorded with theu800 login name asu800 itsu800 keyu800. this simple reu800-linking ofu800 related data back into au800 single collection isu800 something that traditional computer languages areu800 notu800 designed foru800. just asu800 theu800 navigational approach would require programs tou800 loop inu800 order tou800 collect records theu800 relational approach would require loops tou800 collect information about anyu800  oneu800  record. codd codd'su800 solution tou800 theu800 necessary looping wasu800 au800 setu800-oriented language au800 suggestion that would later spawn theu800 ubiquitous sqlu800 . using au800 branch ofu800 mathematics known asu800 tuple calculus heu800 demonstrated that such au800 system could support allu800 theu800 operations ofu800 normal databases inserting updating etcu800. asu800 well asu800 providing au800 simple system foru800 finding andu800 returning  sets  ofu800 data inu800 au800 single operation. codd codd'su800 paper wasu800 picked upu800 byu800 twou800 people atu800 berkeley eugene wong andu800 michael stonebraker . they started au800 project known asu800 ingres using funding that hadu800 already been allocated foru800 au800 geographical database project andu800 student programmers tou800 produce code. beginning inu800 1973 ingres delivered itsu800 first test products which were generally ready foru800 widespread useu800 inu800 1979. ingres wasu800 similar tou800 ibmu800 system ru800 system ru800 inu800 au800 number ofu800 ways including theu800 useu800 ofu800 au800 language foru800 data access known asu800 quel query languages quel . over time ingres moved tou800 theu800 emerging sqlu800 standard. ibmu800 itself didu800 oneu800 test implementation ofu800 theu800 relational model prtv andu800 au800 production oneu800 business system 12u800 both nowu800 discontinued. honeywell wrote multics relational data store mrds foru800 multics andu800 nowu800 there areu800 twou800 newu800 implementations dataphor alphora dataphor andu800 relu800 dbms relu800 . most other dbms implementations usually called  relational  areu800 actually sqlu800 dbmss. inu800 1970 theu800 university ofu800 michigan began development ofu800 theu800 micro information management system william hershey andu800 carol easthope au800 setu800 theoretic data structure andu800 retrieval language spring joint computer conference mayu800 1972 inu800  acmu800 sigir forum  volume 7u800 issue 4u800 december 1972 ppu800. 45u800-55u800 doiu800 10u800u82e1145 1095495u82e1095500 based onu800 du800u82elu800. childs setu800-theoretic data model. kenu800 north sets data models andu800 data independence  dru800. dobb'su800  10u800 march 2010  description ofu800 au800 setu800-theoretic data structure  du800. lu800. childs 1968 technical report 3u800 ofu800 theu800 concomp research inu800 conversational useu800 ofu800 computers project university ofu800 michigan annu800 arbor michigan usau800  feasibility ofu800 au800 setu800-theoretic data structure au800 general structure based onu800 au800 reconstituted definition ofu800 relation  du800. lu800. childs 1968 technical report 6u800 ofu800 theu800 concomp research inu800 conversational useu800 ofu800 computers project university ofu800 michigan annu800 arbor michigan usau800 micro wasu800 used tou800 manage very large data sets byu800 theu800 usu800 department ofu800 labor theu800 uu800u82esu800. environmental protection agency andu800 researchers from theu800 university ofu800 alberta theu800 university ofu800 michigan andu800 wayne state university . itu800 ranu800 onu800 ibmu800 mainframe computers using theu800 michigan terminal system .  micro information management system version 5u800u82e0u800 reference manual  mu800u82eau800. kahn du800u82elu800. rumelhart andu800 bu800u82elu800. bronson october 1977 institute ofu800 labor andu800 industrial relations ilir university ofu800 michigan andu800 wayne state university theu800 system remained inu800 production until 1998. database machines andu800 appliances database machines andu800 appliances database machines andu800 appliances main database machine inu800 theu800 1970s andu800 1980s attempts were made tou800 build database systems with integrated hardware andu800 software. theu800 underlying philosophy wasu800 that such integration would provide higher performance atu800 lower cost. examples were ibmu800 system 38u800 theu800 early offering ofu800 teradata andu800 theu800 britton leeu800 incu800. database machine. another approach tou800 hardware support foru800 database management wasu800 international computers limited iclu800 'su800 content addressable file store cafs accelerator au800 hardware disk controller with programmable search capabilities. inu800 theu800 long term these efforts were generally unsuccessful because specialized database machines could notu800 keep pace with theu800 rapid development andu800 progress ofu800 general-purpose computers. thus most database systems nowadays areu800 software systems running onu800 general-purpose hardware using general-purpose computer data storage. however this idea isu800 still pursued foru800 certain applications byu800 some companies like netezza andu800 oracle corporation oracle exadata . late-1970s sqlu800 dbms late-1970s sqlu800 dbms late-1970s sqlu800 dbms ibmu800 started working onu800 au800 prototype system loosely based onu800 codd codd'su800 concepts asu800   ibmu800 system ru800 system ru800   inu800 theu800 early 1970s. theu800 first version wasu800 ready inu800 1974 5u800 andu800 work then started onu800 multi-table systems inu800 which theu800 data could beu800 split sou800 that allu800 ofu800 theu800 data foru800 au800 record some ofu800 which isu800 optional didu800 notu800 have tou800 beu800 stored inu800 au800 single large chunk . subsequent multi-user versions were tested byu800 customers inu800 1978 andu800 1979 byu800 which time au800 standardized query language u8e28093 sqlu800 citation needed reason first version ofu800 sqlu800 standard wasu800 sqlu800-86u800 adopted inu800 1986 date mayu800 2012 u8e28093 hadu800 been added. codd codd'su800 ideas were establishing themselves asu800 both workable andu800 superior tou800 codasyl pushing ibmu800 tou800 develop au800 true production version ofu800 system ru800 known asu800  sqlu800 dsu800  andu800 later  database 2u800  ibmu800 db2u800 db2u800 . larry ellison 'su800 oracle database oracle started from au800 different chain based onu800 ibmu800 ibmu800'su800 papers onu800 system ru800 andu800 beat ibmu800 tou800 market when theu800 first version wasu800 released inu800 1978. citation needed date march 2013 stonebraker went onu800 tou800 apply theu800 lessons from ingres tou800 develop au800 newu800 database postgres which isu800 nowu800 known asu800 postgresql . postgresql isu800 often used foru800 global mission critical applications theu800 .orgu800 andu800 .info domain name registries useu800 itu800 asu800 their primary data store asu800 dou800 many large companies andu800 financial institutions . inu800 sweden codd codd'su800 paper wasu800 also read andu800 mimer sqlu800 wasu800 developed from theu800 midu800-1970s atu800 uppsala university . inu800 1984 this project wasu800 consolidated into anu800 independent enterprise. inu800 theu800 early 1980s mimer introduced transaction handling foru800 high robustness inu800 applications anu800 idea that wasu800 subsequently implemented onu800 most other dbms. another data model theu800 entity-relationship model emerged inu800 1976 andu800 gained popularity foru800 database design asu800 itu800 emphasized au800 more familiar description than theu800 earlier relational model. later onu800 entity-relationship constructs were retrofitted asu800 au800 data modeling construct foru800 theu800 relational model andu800 theu800 difference between theu800 twou800 have become irrelevant. citation needed date march 2013 1980s desktop databases 1980s desktop databases 1980s desktop databases theu800 1980s ushered inu800 theu800 ageu800 ofu800 desktop computer desktop computing . theu800 newu800 computers empowered their users with spreadsheets like lotus 1u800 2u800 3u800 andu800 database software like dbase . theu800 dbase product wasu800 lightweight andu800 easy foru800 anyu800 computer user tou800 understand outu800 ofu800 theu800 boxu800. cu800. wayne ratliff theu800 creator ofu800 dbase stated u8e2809cdbase wasu800 different from programs like basic cu800 fortran andu800 cobol inu800 that au800 lotu800 ofu800 theu800 dirty work hadu800 already been done. theu800 data manipulation isu800 done byu800 dbase instead ofu800 byu800 theu800 user sou800 theu800 user canu800 concentrate onu800 what heu800 isu800 doing rather than having tou800 mess with theu800 dirty details ofu800 opening reading andu800 closing files andu800 managing space allocationu82eu8e2809c interview with wayne ratliff . theu800 foxpro history. retrieved onu800 2013-07u800-12u800. dbase wasu800 oneu800 ofu800 theu800 topu800 selling software titles inu800 theu800 1980s andu800 early 1990s. 1980s object-oriented databases 1980s object-oriented databases 1980s object-oriented databases theu800 1980s along with au800 rise inu800 object oriented programming sawu800 au800 growth inu800 howu800 data inu800 various databases were handled. programmers andu800 designers began tou800 treat theu800 data inu800 their databases asu800 objects. that isu800 tou800 sayu800 that ifu800 au800 person person'su800 data were inu800 au800 database that person person'su800 attributes such asu800 their address phone number andu800 ageu800 were nowu800 considered tou800 belong tou800 that person instead ofu800 being extraneous data. this allows foru800 relations between data tou800 beu800 relations tou800 objects andu800 their attributes andu800 notu800 tou800 individual fields. development ofu800 anu800 object-oriented dbms; portland oregon united states; pages 472u800 u8e28093 482u800; 1986; isbn 0u800-89791-204u800-7u800 theu800 term object-relational impedance mismatch described theu800 inconvenience ofu800 translating between programmed objects andu800 database tables. object database databases andu800 object-relational database databases attempt tou800 solve this problem byu800 providing anu800 object-oriented language sometimes asu800 extensions tou800 sqlu800 that programmers canu800 useu800 asu800 alternative tou800 purely relational sqlu800. onu800 theu800 programming side libraries known asu800 object-relational mapping mappings orms attempt tou800 solve theu800 same problem. 2000s nosql andu800 newsql databases 2000s nosql andu800 newsql databases 2000s nosql andu800 newsql databases main nosql theu800 next generation ofu800 post-relational databases inu800 theu800 2000s became known asu800 nosql databases including fast keyu800-value store stores andu800 document-oriented database databases. xmlu800 databases areu800 au800 type ofu800 structured document-oriented database that allows querying based onu800 xmlu800 document attributes. nosql databases areu800 often very fast dou800 notu800 require fixed table schemas avoid join operations byu800 storing denormalization denormalized data andu800 areu800 designed tou800 horizontal scaling scale horizontally . inu800 recent years there wasu800 au800 high demand foru800 massively distributed databases with high partition tolerance butu800 according tou800 theu800 capu800 theorem itu800 isu800 impossible foru800 au800 distributed computing distributed system tou800 simultaneously provide consistency model consistency availability andu800 partition tolerance guarantees. au800 distributed system canu800 satisfy anyu800 twou800 ofu800 these guarantees atu800 theu800 same time butu800 notu800 allu800 three. foru800 that reason many nosql databases areu800 using what isu800 called eventual consistency tou800 provide both availability andu800 partition tolerance guarantees with au800 maximum level ofu800 data consistency. theu800 most popular nosql systems include mongodb riak oracle nosql database memcached redis couchdb hazelcast apache cassandra andu800 hbase cite webu800 urlu800 title dbu800-engines ranking date january 2013 accessdate 22u800 january 2013 note that allu800 areu800 open-source software products. au800 number ofu800 newu800 relational databases continuing useu800 ofu800 sqlu800 butu800 aiming foru800 performance comparable tou800 nosql areu800 known asu800 newsql . database research database research database research database technology hasu800 been anu800 active research topic since theu800 1960s both inu800 academia andu800 inu800 theu800 research andu800 development groups ofu800 companies foru800 example ibmu800 research . research activity includes database theory theory andu800 development ofu800 prototype prototypes. notable research topics have included data model models theu800 database transaction atomic transaction concept andu800 related concurrency control techniques query languages andu800 query optimization methods raid andu800 more. theu800 database research area hasu800 several dedicated academic journal journals foru800 example acmu800 transactions onu800 database systems -tods data andu800 knowledge engineering -dkeu800 andu800 annual academic conference conference conferences eu800u82egu800. association foru800 computing machinery acmu800 sigmod acmu800 symposium onu800 principles ofu800 database systems pods vldb ieee icde . database type examples database type examples database type examples oneu800 wayu800 tou800 classify databases involves theu800 type ofu800 their contents foru800 example bibliographic database bibliographic document-text statistical oru800 multimedia objects. another wayu800 isu800 byu800 their application area foru800 example accounting music compositions movies banking manufacturing oru800 insurance. au800 third wayu800 isu800 byu800 some technical aspect such asu800 theu800 database structure oru800 interface type. this section lists au800 fewu800 ofu800 theu800 adjectives used tou800 characterize different kinds ofu800 databases. anu800 inu800-memory database isu800 au800 database that primarily resides inu800 main memory butu800 isu800 typically backed-upu800 byu800 nonu800-volatile computer data storage. main memory databases areu800 faster than disk databases andu800 sou800 areu800 often used where response time isu800 critical such asu800 inu800 telecommunications network equipment. cite news urlu800 work business wire title telecommunication systems signs upu800 asu800 au800 reseller ofu800 timesten; mobile operators andu800 carriers gain real-time platform foru800 location-based services date 2002-06u800-24u800 sapu800 hana platform isu800 au800 very hotu800 topic foru800 inu800-memory database. byu800 mayu800 2012 hana wasu800 able tou800 runu800 onu800 servers with 100tb main memory powered byu800 ibmu800. theu800 cou800 founder ofu800 theu800 company claimed that theu800 system wasu800 bigu800 enough tou800 runu800 theu800 8u800 largest sapu800 customers. anu800 active database includes anu800 event-driven architecture which canu800 respond tou800 conditions both inside andu800 outside theu800 database. possible uses include security monitoring alerting statistics gathering andu800 authorization. many databases provide active database features inu800 theu800 form ofu800 database trigger triggers. au800 cloud database relies onu800 cloud computing cloud technology . both theu800 database andu800 most ofu800 itsu800 dbms reside remotely inu800 theu800 cloud while itsu800 applications areu800 both developed byu800 programmers andu800 later maintained andu800 utilized byu800 application application'su800 endu800-users through au800 webu800 browser andu800 open apiu800 apis. data warehouse warehouses archive data from operational databases andu800 often from external sources such asu800 market research firms. theu800 warehouse becomes theu800 central source ofu800 data foru800 useu800 byu800 managers andu800 other endu800-users whou800 mayu800 notu800 have access tou800 operational data. foru800 example sales data might beu800 aggregated tou800 weekly totals andu800 converted from internal product codes tou800 useu800 universal product code upcu800 upcs sou800 that they canu800 beu800 compared with acnielsen data. some basic andu800 essential components ofu800 data warehousing include retrieving analyzing andu800 data mining mining data transforming loading andu800 managing data sou800 asu800 tou800 make them available foru800 further useu800. au800 deductive database combines logic programming with au800 relational database foru800 example byu800 using theu800 datalog language. au800 distributed database isu800 oneu800 inu800 which both theu800 data andu800 theu800 dbms span multiple computers. au800 document-oriented database isu800 designed foru800 storing retrieving andu800 managing document-oriented oru800 semi structured data information. document-oriented databases areu800 oneu800 ofu800 theu800 main categories ofu800 nosql databases. anu800 embedded database system isu800 au800 dbms which isu800 tightly integrated with anu800 application software that requires access tou800 stored data inu800 such au800 wayu800 that theu800 dbms isu800 hidden from theu800 applicationu8e28099s endu800-users andu800 requires little oru800 nou800 ongoing maintenance. graves steve. cots databases foru800 embedded systems  embedded computing design  magazine january 2007. retrieved onu800 august 13u800 2008.  endu800-user databases  consist ofu800 data developed byu800 individual endu800-users. examples ofu800 these areu800 collections ofu800 documents spreadsheets presentations multimedia andu800 other files. several products exist tou800 support such databases. some ofu800 them areu800 much simpler than full fledged dbmss with more elementary dbms functionality. au800 federated database system comprises several distinct databases each with itsu800 ownu800 dbms. itu800 isu800 handled asu800 au800 single database byu800 au800 federated database management system fdbms which transparently integrates multiple autonomous dbmss possibly ofu800 different types inu800 which case itu800 would also beu800 au800 heterogeneous database system andu800 provides them with anu800 integrated conceptual view. sometimes theu800 term  multi-database  isu800 used asu800 au800 synonym tou800 federated database though itu800 mayu800 refer tou800 au800 less integrated eu800u82egu800. without anu800 fdbms andu800 au800 managed integrated schema group ofu800 databases that cooperate inu800 au800 single application. inu800 this case typically middleware distributed applications middleware isu800 used foru800 distribution which typically includes anu800 atomic commit protocol acpu800 eu800u82egu800. theu800 twou800-phase commit protocol tou800 allow distributed transaction distributed global transactions across theu800 participating databases. au800 graph database isu800 au800 kind ofu800 nosql database that uses graph data structure graph structures with nodes edges andu800 properties tou800 represent andu800 store information. general graph databases that canu800 store anyu800 graph areu800 distinct from specialized graph databases such asu800 triplestore triplestores andu800 network database model network databases . inu800 au800 hypertext oru800 hypermedia database anyu800 word oru800 au800 piece ofu800 text representing anu800 object eu800u82egu800. another piece ofu800 text anu800 article au800 picture oru800 au800 film canu800 beu800 hyperlink hyperlinked tou800 that object. hypertext databases areu800 particularly useful foru800 organizing large amounts ofu800 disparate information. foru800 example they areu800 useful foru800 organizing online encyclopedia encyclopedias where users canu800 conveniently jump around theu800 text. theu800 world wide webu800 isu800 thus au800 large distributed hypertext database. au800 knowledge base abbreviated  kbu800   kbu800  oru800 u8ceb4 argumentation inu800 artificial intelligence byu800 iyad rahwan guillermo ru800. simari cite webu800 title owlu800 dlu800 semantics urlu800 accessdate 10u800 december 2010 isu800 au800 special kind ofu800 database foru800 knowledge management providing theu800 means foru800 theu800 computerized collection organization andu800 information retrieval retrieval ofu800 knowledge . also au800 collection ofu800 data representing problems with their solutions andu800 related experiences. au800 mobile database canu800 beu800 carried onu800 oru800 synchronized from au800 mobile computing device . operational database databases store detailed data about theu800 operations ofu800 anu800 organization. they typically process relatively high volumes ofu800 updates using transaction database transactions . examples include customer relationship management customer databases that record contact credit andu800 demographic information about au800 business customers personnel databases that hold information such asu800 salary benefits skills data about employees enterprise resource planning systems that record details about product components parts inventory andu800 financial databases that keep track ofu800 theu800 organization organization'su800 money accounting andu800 financial dealings. au800 parallel database seeks tou800 improve performance through parallel computing parallelization foru800 tasks such asu800 loading data building indexes andu800 evaluating queries. theu800 major parallel dbms architectures which areu800 induced byu800 theu800 underlying computer hardware hardware architecture areu800   shared memory#inu800 hardware shared memory architecture   where multiple processors share theu800 main memory space asu800 well asu800 other data storage.  shared disk architecture  where each processing unit typically consisting ofu800 multiple processors hasu800 itsu800 ownu800 main memory butu800 allu800 units share theu800 other storage.   shared nothing architecture   where each processing unit hasu800 itsu800 ownu800 main memory andu800 other storage. probabilistic database databases employ fuzzy logic tou800 draw inferences from imprecise data. real-time database databases process transactions fast enough foru800 theu800 result tou800 come back andu800 beu800 acted onu800 right away. au800 spatial database canu800 store theu800 data with multidimensional features. theu800 queries onu800 such data include location based queries like where isu800 theu800 closest hotel inu800 myu800 area . au800 temporal database hasu800 built-inu800 time aspects foru800 example au800 temporal data model andu800 au800 temporal version ofu800 sqlu800. more specifically theu800 temporal aspects usually include valid-time andu800 transaction-time. au800 terminology-oriented database builds upon anu800 object-oriented database often customized foru800 au800 specific field. anu800 unstructured data database isu800 intended tou800 store inu800 au800 manageable andu800 protected wayu800 diverse objects that dou800 notu800 fitu800 naturally andu800 conveniently inu800 common databases. itu800 mayu800 include email messages documents journals multimedia objects etcu800. theu800 name mayu800 beu800 misleading since some objects canu800 beu800 highly structured. however theu800 entire possible object collection does notu800 fitu800 into au800 predefined structured framework. most established dbmss nowu800 support unstructured data inu800 various ways andu800 newu800 dedicated dbmss areu800 emerging. -- isnu800'tu800 this au800 document-oriented database ifu800 notu800 clearly distinguish. -- database design andu800 modeling database design andu800 modeling database design andu800 modeling main database design theu800 first task ofu800 au800 database designer isu800 tou800 produce au800 conceptual data model that reflects theu800 structure ofu800 theu800 information tou800 beu800 held inu800 theu800 database. au800 common approach tou800 this isu800 tou800 develop anu800 entity-relationship model often with theu800 aidu800 ofu800 drawing tools. another popular approach isu800 theu800 unified modeling language . au800 successful data model will accurately reflect theu800 possible state ofu800 theu800 external world being modeled foru800 example ifu800 people canu800 have more than oneu800 phone number itu800 will allow this information tou800 beu800 captured. designing au800 good conceptual data model requires au800 good understanding ofu800 theu800 application domain; itu800 typically involves asking deep questions about theu800 things ofu800 interest tou800 anu800 organisation like canu800 au800 customer also beu800 au800 supplier oru800 ifu800 au800 product isu800 sold with twou800 different forms ofu800 packaging areu800 those theu800 same product oru800 different products oru800 ifu800 au800 plane flies from newu800 york tou800 dubai viau800 frankfurt isu800 that oneu800 flight oru800 twou800 oru800 maybe even three . theu800 answers tou800 these questions establish definitions ofu800 theu800 terminology used foru800 entities customers products flights flight segments andu800 their relationships andu800 attributes. producing theu800 conceptual data model sometimes involves input from business process modeling business processes oru800 theu800 analysis ofu800 workflow inu800 theu800 organization. this canu800 help tou800 establish what information isu800 needed inu800 theu800 database andu800 what canu800 beu800 left outu800. foru800 example itu800 canu800 help when deciding whether theu800 database needs tou800 hold historic data asu800 well asu800 current data. having produced au800 conceptual data model that users areu800 happy with theu800 next stage isu800 tou800 translate this into au800 database schema schema that implements theu800 relevant data structures within theu800 database. this process isu800 often called logical database design andu800 theu800 output isu800 au800 logical data model expressed inu800 theu800 form ofu800 au800 schema. whereas theu800 conceptual data model isu800 inu800 theory atu800 least independent ofu800 theu800 choice ofu800 database technology theu800 logical data model will beu800 expressed inu800 terms ofu800 au800 particular database model supported byu800 theu800 chosen dbms. theu800 terms  data model  andu800  database model  areu800 often used interchangeably butu800 inu800 this article weu800 useu800  data model  foru800 theu800 design ofu800 au800 specific database andu800  database model  foru800 theu800 modelling notation used tou800 express that design. theu800 most popular database model foru800 general-purpose databases isu800 theu800 relational model oru800 more precisely theu800 relational model asu800 represented byu800 theu800 sqlu800 language. theu800 process ofu800 creating au800 logical database design using this model uses au800 methodical approach known asu800 database normalization normalization . theu800 goal ofu800 normalization isu800 tou800 ensure that each elementary fact isu800 only recorded inu800 oneu800 place sou800 that insertions updates andu800 deletions automatically maintain consistency. theu800 final stage ofu800 database design isu800 tou800 make theu800 decisions that affect performance scalability recovery security andu800 theu800 like. this isu800 often called  physical database design . au800 keyu800 goal during this stage isu800 data independence meaning that theu800 decisions made foru800 performance optimization purposes should beu800 invisible tou800 endu800-users andu800 applications. physical design isu800 driven mainly byu800 performance requirements andu800 requires au800 good knowledge ofu800 theu800 expected workload andu800 access patterns andu800 au800 deep understanding ofu800 theu800 features offered byu800 theu800 chosen dbms. another aspect ofu800 physical database design isu800 security. itu800 involves both defining access control tou800 database objects asu800 well asu800 defining security levels andu800 methods foru800 theu800 data itself. database models database models database models file database modelsu82ejpgu800 thumb 480px collage ofu800 five types ofu800 database models. main database model au800 database model isu800 au800 type ofu800 data model that determines theu800 logical structure ofu800 au800 database andu800 fundamentally determines inu800 which manner data canu800 beu800 stored organized andu800 manipulated. theu800 most popular example ofu800 au800 database model isu800 theu800 relational model oru800 theu800 sqlu800 approximation ofu800 relational which uses au800 table-based format. common logical data model models foru800 databases include hierarchical database model network model relational model entityu8e28093relationship model enhanced entityu8e28093relationship model object database object model document-oriented database document model entityu8e28093attributeu8e28093value model star schema anu800 object-relational database combines theu800 twou800 related structures. physical data model models include inverted index flat file database flat file other models include associative model ofu800 data associative model multidimensional database multidimensional model multivalue model semantic data model semantic model xmlu800 database named graph external conceptual andu800 internal views external conceptual andu800 internal views external conceptual andu800 internal views image a2u800 2u800 traditional view ofu800 datau82ejpgu800 thumb 320px traditional view ofu800 data itlu800u82enistu82egovu800 1993  integration definition foru800 information modeling idefix   . 21u800 december 1993. au800 database management system provides three views ofu800 theu800 database data theu800  external level  defines howu800 each group ofu800 endu800-users sees theu800 organization ofu800 data inu800 theu800 database. au800 single database canu800 have anyu800 number ofu800 views atu800 theu800 external level. theu800  conceptual level  unifies theu800 various external views into au800 compatible global view. itu800 provides theu800 synthesis ofu800 allu800 theu800 external views. itu800 isu800 outu800 ofu800 theu800 scope ofu800 theu800 various database endu800-users andu800 isu800 rather ofu800 interest tou800 database application developers andu800 database administrators. theu800  internal level  oru800  physical level  isu800 theu800 internal organization ofu800 data inside au800 dbms seeu800 implementation section below . itu800 isu800 concerned with cost performance scalability andu800 other operational matters. itu800 deals with storage layout ofu800 theu800 data using storage structures such asu800 index database indexes tou800 enhance performance. occasionally itu800 stores data ofu800 individual views materialized view views computed from generic data ifu800 performance justification exists foru800 such redundancy. itu800 balances allu800 theu800 external views performance requirements possibly conflicting inu800 anu800 attempt tou800 optimize overall performance across allu800 activities. while there isu800 typically only oneu800 conceptual oru800 logical andu800 physical oru800 internal view ofu800 theu800 data there canu800 beu800 anyu800 number ofu800 different external views. this allows users tou800 seeu800 database information inu800 au800 more business-related wayu800 rather than from au800 technical processing viewpoint. foru800 example au800 financial department ofu800 au800 company needs theu800 payment details ofu800 allu800 employees asu800 part ofu800 theu800 company company'su800 expenses butu800 does notu800 need details about employees that areu800 theu800 interest ofu800 theu800 human resources department. thus different departments need different  views  ofu800 theu800 company company'su800 database. theu800 three-level database architecture relates tou800 theu800 concept ofu800   data independence   which wasu800 oneu800 ofu800 theu800 major initial driving forces ofu800 theu800 relational model. theu800 idea isu800 that changes made atu800 au800 certain level dou800 notu800 affect theu800 view atu800 au800 higher level. foru800 example changes inu800 theu800 internal level dou800 notu800 affect application programs written using conceptual level interfaces which reduces theu800 impact ofu800 making physical changes tou800 improve performance. theu800 conceptual view provides au800 level ofu800 indirection between internal andu800 external. onu800 oneu800 hand itu800 provides au800 common view ofu800 theu800 database independent ofu800 different external view structures andu800 onu800 theu800 other hand itu800 abstracts away details ofu800 howu800 theu800 data isu800 stored oru800 managed internal level . inu800 principle every level andu800 even every external view canu800 beu800 presented byu800 au800 different data model. inu800 practice usually au800 given dbms uses theu800 same data model foru800 both theu800 external andu800 theu800 conceptual levels eu800u82egu800. relational model . theu800 internal level which isu800 hidden inside theu800 dbms andu800 depends onu800 itsu800 implementation seeu800 implementation section below requires au800 different level ofu800 detail andu800 uses itsu800 ownu800 types ofu800 data structure types. separating theu800  external   conceptual  andu800  internal  levels wasu800 au800 major feature ofu800 theu800 relational database model implementations that dominate 21st century databases. harvnb date 1990 pages 31u8e2809332 database languages database languages database languages database languages areu800 special-purpose languages which dou800 oneu800 oru800 more ofu800 theu800 following data definition language - defines data types andu800 theu800 relationships among them data manipulation language - performs tasks such asu800 inserting updating oru800 deleting data occurrences query language - allows searching foru800 information andu800 computing derived information database languages areu800 specific tou800 au800 particular data model. notable examples include sqlu800 combines theu800 roles ofu800 data definition data manipulation andu800 query inu800 au800 single language. itu800 wasu800 oneu800 ofu800 theu800 first commercial languages foru800 theu800 relational model although itu800 departs inu800 some respects from codd codd'su800 12u800 rules theu800 relational model asu800 described byu800 codd foru800 example theu800 rows andu800 columns ofu800 au800 table canu800 beu800 ordered . sqlu800 became au800 technical standard standard ofu800 theu800 american national standards institute ansi inu800 1986 andu800 ofu800 theu800 international organization foru800 standards isou800 inu800 1987. theu800 standards have been regularly enhanced since andu800 isu800 supported with varying degrees ofu800 conformance byu800 allu800 mainstream commercial relational dbmss. cite webu800 last chapple first mike title sqlu800 fundamentals work databases publisher aboutu82ecomu800 urlu800 accessdate 2009-01u800-28u800 cite webu800 title structured query language sqlu800 publisher international business machines urlu800 date october 27u800 2006 accessdate 2007-06u800-10u800 oqlu800 isu800 anu800 object database object model language standard from theu800 object data management group . itu800 hasu800 influenced theu800 design ofu800 some ofu800 theu800 newer query languages like jdoql andu800 ejbu800 qlu800 . xquery isu800 au800 standard xmlu800 query language implemented byu800 xmlu800 database systems such asu800 marklogic andu800 exist byu800 relational databases with xmlu800 capability such asu800 oracle database oracle andu800 ibmu800 db2u800 db2u800 andu800 also byu800 inu800-memory xmlu800 processors such asu800 saxon xslt saxon . sqlu800 xmlu800 combines xquery with sqlu800 . citation title sqlu800 xmlu800 2006 - evaluierung deru800 standardkonformitu8c3a4t ausgewu8c3a4hlter datenbanksysteme chapter 1u800. auflage author wagner michael year 2010 publisher diplomica verlag isbn 3u800-8366-9609-6u800 au800 database language mayu800 also incorporate features like dbms-specific configuration andu800 storage engine management computations tou800 modify query results like counting summing averaging sorting grouping andu800 cross-referencing constraint enforcement eu800u82egu800. inu800 anu800 automotive database only allowing oneu800 engine type peru800 caru800 application programming interface version ofu800 theu800 query language foru800 programmer convenience performance security andu800 availability performance security andu800 availability performance security andu800 availability because ofu800 theu800 critical importance ofu800 database technology tou800 theu800 smooth running ofu800 anu800 enterprise database systems include complex mechanisms tou800 deliver theu800 required performance security andu800 availability andu800 allow database administrators tou800 control theu800 useu800 ofu800 these features. database storage database storage database storage main computer data storage database engine database storage isu800 theu800 container ofu800 theu800 physical materialization ofu800 au800 database. itu800 comprises theu800  internal  physical  level  inu800 theu800 database architecture. itu800 also contains allu800 theu800 information needed eu800u82egu800. metadata data about theu800 data andu800 internal data structure structures tou800 reconstruct theu800  conceptual level  andu800  external level  from theu800 internal level when needed. putting data into permanent storage isu800 generally theu800 responsibility ofu800 theu800 database engine au800u82eku800u82eau800. storage engine . though typically accessed byu800 au800 dbms through theu800 underlying operating system andu800 often utilizing theu800 operating systems file system systems asu800 intermediates foru800 storage layout storage properties andu800 configuration setting areu800 extremely important foru800 theu800 efficient operation ofu800 theu800 dbms andu800 thus areu800 closely maintained byu800 database administrators. au800 dbms while inu800 operation always hasu800 itsu800 database residing inu800 several types ofu800 storage eu800u82egu800. memory andu800 external storage . theu800 database data andu800 theu800 additional needed information possibly inu800 very large amounts areu800 coded into bits. data typically reside inu800 theu800 storage inu800 structures that look completely different from theu800 wayu800 theu800 data look inu800 theu800 conceptual andu800 external levels butu800 inu800 ways that attempt tou800 optimize theu800 best possible these levels reconstruction when needed byu800 users andu800 programs asu800 well asu800 foru800 computing additional types ofu800 needed information from theu800 data eu800u82egu800. when querying theu800 database . some dbms support specifying which character encoding wasu800 used tou800 store data sou800 multiple encodings canu800 beu800 used inu800 theu800 same database. various lowu800-level database storage structures areu800 used byu800 theu800 storage engine tou800 serialize theu800 data model sou800 itu800 canu800 beu800 written tou800 theu800 medium ofu800 choice. techniques such asu800 index database indexing mayu800 beu800 used tou800 improve performance. conventional storage isu800 rowu800-oriented butu800 there areu800 also column-oriented dbms column-oriented andu800 correlation database databases. database materialized views database materialized views database materialized views main materialized view often storage redundancy isu800 employed tou800 increase performance. au800 common example isu800 storing   materialized view views  which consist ofu800 frequently needed  external views  oru800 query results. storing such views saves theu800 expensive computing ofu800 them each time they areu800 needed. theu800 downsides ofu800 materialized views areu800 theu800 overhead incurred when updating them tou800 keep them synchronized with their original updated database data andu800 theu800 cost ofu800 storage redundancy. database andu800 database object replication database andu800 database object replication database andu800 database object replication main database replication occasionally au800 database employs storage redundancy byu800 database objects replication with oneu800 oru800 more copies tou800 increase data availability both tou800 improve performance ofu800 simultaneous multiple endu800-user accesses tou800 au800 same database object andu800 tou800 provide resiliency inu800 au800 case ofu800 partial failure ofu800 au800 distributed database . updates ofu800 au800 replicated object need tou800 beu800 synchronized across theu800 object copies. inu800 many cases theu800 entire database isu800 replicated. database security database security database security sync database security main database security database security deals with allu800 various aspects ofu800 protecting theu800 database content itsu800 owners andu800 itsu800 users. itu800 ranges from protection from intentional unauthorized database uses tou800 unintentional database accesses byu800 unauthorized entities eu800u82egu800. au800 person oru800 au800 computer program . database access control deals with controlling whou800 au800 person oru800 au800 certain computer program isu800 allowed tou800 access what information inu800 theu800 database. theu800 information mayu800 comprise specific database objects eu800u82egu800. record types specific records data structures certain computations over certain objects eu800u82egu800. query types oru800 specific queries oru800 utilizing specific access paths tou800 theu800 former eu800u82egu800. using specific indexes oru800 other data structures tou800 access information . database access controls areu800 setu800 byu800 special authorized byu800 theu800 database owner personnel that uses dedicated protected security dbms interfaces. this mayu800 beu800 managed directly onu800 anu800 individual basis oru800 byu800 theu800 assignment ofu800 individuals andu800 privilege computing privileges tou800 groups oru800 inu800 theu800 most elaborate models through theu800 assignment ofu800 individuals andu800 groups tou800 roles which areu800 then granted entitlements. data security prevents unauthorized users from viewing oru800 updating theu800 database. using passwords users areu800 allowed access tou800 theu800 entire database oru800 subsets ofu800 itu800 called subschemas . foru800 example anu800 employee database canu800 contain allu800 theu800 data about anu800 individual employee butu800 oneu800 group ofu800 users mayu800 beu800 authorized tou800 view only payroll data while others areu800 allowed access tou800 only work history andu800 medical data. ifu800 theu800 dbms provides au800 wayu800 tou800 interactively enter andu800 update theu800 database asu800 well asu800 interrogate itu800 this capability allows foru800 managing personal databases. data security inu800 general deals with protecting specific chunks ofu800 data both physically iu800u82eeu800. from corruption oru800 destruction oru800 removal; eu800u82egu800. seeu800 physical security oru800 theu800 interpretation ofu800 them oru800 parts ofu800 them tou800 meaningful information eu800u82egu800. byu800 looking atu800 theu800 strings ofu800 bits that they comprise concluding specific valid credit-card numbers; eu800u82egu800. seeu800 data encryption . change andu800 access logging records whou800 accessed which attributes what wasu800 changed andu800 when itu800 wasu800 changed. logging services allow foru800 au800 forensic database audit later byu800 keeping au800 record ofu800 access occurrences andu800 changes. sometimes application-level code isu800 used tou800 record changes rather than leaving this tou800 theu800 database. monitoring canu800 beu800 setu800 upu800 tou800 attempt tou800 detect security breaches. transactions andu800 concurrency transactions andu800 concurrency transactions andu800 concurrency database transactions canu800 beu800 used tou800 introduce some level ofu800 fault tolerance andu800 data integrity after recovery from au800 crash computing crash . au800 database transaction isu800 au800 unit ofu800 work typically encapsulating au800 number ofu800 operations over au800 database eu800u82egu800. reading au800 database object writing acquiring lock database lock etcu800. anu800 abstraction supported inu800 database andu800 also other systems. each transaction hasu800 well defined boundaries inu800 terms ofu800 which program code executions areu800 included inu800 that transaction determined byu800 theu800 transaction transaction'su800 programmer viau800 special transaction commands . theu800 acronym acid describes some ideal properties ofu800 au800 database transaction atomicity database systems atomicity consistency database systems consistency isolation database systems isolation andu800 durability database systems durability . further concurrency control migration migration migration  seeu800 also section data migration#database migration database migration inu800 article data migration   au800 database built with oneu800 dbms isu800 notu800 software portability portable tou800 another dbms iu800u82eeu800. theu800 other dbms cannot runu800 itu800 . however inu800 some situations itu800 isu800 desirable tou800 move migrate au800 database from oneu800 dbms tou800 another. theu800 reasons areu800 primarily economical different dbmss mayu800 have different total cost ofu800 ownership total costs ofu800 ownership oru800 tcos functional andu800 operational different dbmss mayu800 have different capabilities . theu800 migration involves theu800 database database'su800 transformation from oneu800 dbms type tou800 another. theu800 transformation should maintain ifu800 possible theu800 database related application iu800u82eeu800. allu800 related application programs intact. thus theu800 database database'su800 conceptual andu800 external architectural levels should beu800 maintained inu800 theu800 transformation. itu800 mayu800 beu800 desired that also some aspects ofu800 theu800 architecture internal level areu800 maintained. au800 complex oru800 large database migration mayu800 beu800 au800 complicated andu800 costly oneu800-time project byu800 itself which should beu800 factored into theu800 decision tou800 migrate. this inu800 spite ofu800 theu800 fact that tools mayu800 exist tou800 help migration between specific dbms. typically au800 dbms vendor provides tools tou800 help importing databases from other popular dbmss. database building maintaining andu800 tuning database building maintaining andu800 tuning database building maintaining andu800 tuning main database tuning after designing au800 database foru800 anu800 application arrives theu800 stage ofu800 building theu800 database. typically anu800 appropriate general-purpose dbms canu800 beu800 selected tou800 beu800 utilized foru800 this purpose. au800 dbms provides theu800 needed user interface interfaces tou800 beu800 utilized byu800 database administrators tou800 define theu800 needed application application'su800 data structures within theu800 dbms dbms'su800 respective data model. other user interfaces areu800 used tou800 select needed dbms parameters like security related storage allocation parameters etcu800. . when theu800 database isu800 ready allu800 itsu800 data structures andu800 other needed components areu800 defined itu800 isu800 typically populated with initial application application'su800 data database initialization which isu800 typically au800 distinct project; inu800 many cases using specialized dbms interfaces that support bulk insertion before making itu800 operational. inu800 some cases theu800 database becomes operational while empty from application application'su800 data andu800 data areu800 accumulated along itsu800 operation. after completing building theu800 database andu800 making itu800 operational arrives theu800 database maintenance stage various database parameters mayu800 need changes andu800 database tuning tuning foru800 better performance application application'su800 data structures mayu800 beu800 changed oru800 added newu800 related application programs mayu800 beu800 written tou800 addu800 tou800 theu800 application application'su800 functionality etcu800. contribution byu800 malebye joyce asu800 adapted from informations systems foru800 businesses from chapter 5u800 - storing adu800 organizing data. databases areu800 often confused with spread sheet such asu800 microsoft excel which isu800 different from microsoft access. both canu800 beu800 used tou800 store information however au800 database serves au800 better function atu800 this. below isu800 au800 comparison ofu800 spreadsheets andu800 databases. spread sheets strengths -1u800. very simple data storage 2u800. relatively easy tou800 useu800 3u800. require less planning weaknesses- 1u800. data integrity problems include inaccurate inconsistent andu800 outu800 ofu800 date version andu800 outu800 ofu800 date data. 2u800. formulas could beu800 incorrect databases strengths 1u800. methods foru800 keeping data upu800 tou800 date andu800 consistent 2u800. data isu800 ofu800 higher quality than data stored inu800 spreadsheets 3u800. good foru800 storing andu800 organizing information. weakness 1u800. require more planning andu800 designing backup andu800 restore backup andu800 restore backup andu800 restore main backup sometimes itu800 isu800 desired tou800 bring au800 database back tou800 au800 previous state foru800 many reasons eu800u82egu800. cases when theu800 database isu800 found corrupted dueu800 tou800 au800 software error oru800 ifu800 itu800 hasu800 been updated with erroneous data . tou800 achieve this au800  backup  operation isu800 done occasionally oru800 continuously where each desired database state iu800u82eeu800. theu800 values ofu800 itsu800 data andu800 their embedding inu800 database database'su800 data structures isu800 kept within dedicated backup files many techniques exist tou800 dou800 this effectively . when this state isu800 needed iu800u82eeu800. when itu800 isu800 decided byu800 au800 database administrator tou800 bring theu800 database back tou800 this state eu800u82egu800. byu800 specifying this state byu800 au800 desired point inu800 time when theu800 database wasu800 inu800 this state these files areu800 utilized tou800  restore  that state. other other other other dbms features might include database logu800 logs graphics component foru800 producing graphs andu800 charts especially inu800 au800 data warehouse system   query optimizer   - performs query optimization onu800 every query tou800 choose foru800 itu800 theu800 most efficient   query plan   au800 partial order tree ofu800 operations tou800 beu800 executed tou800 compute theu800 query result. mayu800 beu800 specific tou800 au800 particular storage engine. tools oru800 hooks foru800 database design application programming application program maintenance database performance analysis andu800 monitoring database configuration monitoring dbms hardware configuration au800 dbms andu800 related database mayu800 span computers networks andu800 storage units andu800 related database mapping especially foru800 au800 distributed dbms storage allocation andu800 database layout monitoring storage migration etcu800. seeu800 also seeu800 also seeu800 also wikipedia books databases comparison ofu800 database tools comparison ofu800 object database management systems comparison ofu800 object-relational database management systems comparison ofu800 relational database management systems data access data hierarchy data store data warehouse database testing database-centric architecture metadata references references references reflist colwidth 30em further reading further reading further reading refbegin ling liuu800 andu800 tamer mu800. u8c3b6zsu edsu800. 2009 . encyclopedia ofu800 database systems 4100 pu800.&nbsp;60u800 illus. isbn 978u800-0u800-387u800-49616-0u800. beynon-davies pu800. 2004 . database systems. 3rdu800 edition. palgrave houndmills basingstoke. connolly thomas andu800 carolyn begg.  database systems.  newu800 york harlow 2002. cite book last date first cu800. ju800. authorlink christopher ju800. date title anu800 introduction tou800 database systems fifth edition publisher addison wesley year 2003 isbn 0u800-201u800-51381-1u800 refu800 harv gray ju800. andu800 reuter au800.  transaction processing concepts andu800 techniques  1stu800 edition morgan kaufmann publishers 1992. kroenke david mu800. andu800 david ju800. auer.  database concepts.  3rdu800 edu800. newu800 york prentice 2007. raghu ramakrishnan andu800 johannes gehrke   database management systems   abraham silberschatz henry fu800. korth su800. sudarshan   database system concepts   discussion onu800 database systems     cite book last1 lightstone first1 su800. first2 tu800. last2 teorey first3 tu800. last3 nadeau title physical database design theu800 database professional professional'su800 guide tou800 exploiting indexes views storage andu800 more publisher morgan kaufmann press year 2007 isbn 0u800-12u800-369389-6u800 refu800 harv teorey tu800.; lightstone su800. andu800 nadeau tu800.  database modeling & design logical design  4thu800 edition morgan kaufmann press 2005. isbn 0u800-12u800-685352-5u800 refend external links external links external links sister project links wikt database commons category database vu800 topic databases dmoz computers data_formats database database databases database models data warehouse category databases category database management systems category database theory deu800 datenbank#datenbankmanagementsystem 