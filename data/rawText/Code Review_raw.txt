  code review  isu800 systematic examination often known asu800 software peer review peer review ofu800 computer source code . itu800 isu800 intended tou800 find andu800 fixu800 software bugu800 mistakes overlooked inu800 theu800 software development initial development phase improving both theu800 overall software quality quality ofu800 software andu800 theu800 developers skills. reviews areu800 done inu800 various forms such asu800 pair programming informal walkthroughs andu800 formal software inspection inspections . cite book last kolawa first adam coauthors huizinga dorota title automated defect prevention best practices inu800 software management urlu800 year 2007 publisher wiley-ieee computer society press location page 260u800 isbn 0u800-470u800-04212-5u800 introduction introduction introduction code reviews canu800 often find andu800 remove common vulnerability computing vulnerabilities such asu800 format string attacks format string exploit exploits race condition conditions memory leak leaks andu800 buffer overflow overflows thereby improving software security. online software repositories based onu800 subversion software subversion with redmine oru800 trac mercurial software mercurial gitu800 software gitu800 oru800 others allow groups ofu800 individuals tou800 collaboratively review code. additionally specific list ofu800 tools foru800 code review tools foru800 collaborative code review canu800 facilitate theu800 code review process. automated code reviewing software lessens theu800 task ofu800 reviewing large chunks ofu800 code onu800 theu800 software developer developer byu800 systematically checking source code foru800 known vulnerabilities. au800 2012 study byu800 vdcu800 research reports that 17u800u82e6u800 ofu800 theu800 embedded software engineers surveyed currently useu800 automated tools foru800 peer code review andu800 23u800u82e7u800 expect tou800 useu800 them within 2u800 years. cite webu800 title automated defect prevention foru800 embedded software quality last vdcu800 research first publisher vdcu800 research date 2012-02u800-01u800 urlu800 accessdate 2012-04u800-10u800 capers jones ongoing analysis ofu800 over 12u800 000u800 software development projects showed that theu800 latent defect discovery rate ofu800 formal inspection isu800 inu800 theu800 60u800-65u800 range. foru800 informal inspection theu800 figure isu800 less than 50u800 . citation needed date june 2009 theu800 latent defect discovery rate foru800 most forms ofu800 testing isu800 about 30u800 . cite webu800 title embedded software facts figures andu800 future first1 capers last1 jones first2 ebert last2 christof publisher ieee computer society date april 2009 urlu800 accessdate 2010-10u800-05u800 typical code review rates areu800 about 150u800 lines ofu800 code peru800 hour. inspecting andu800 reviewing more than au800 fewu800 hundred lines ofu800 code peru800 hour foru800 critical software such asu800 safety critical embedded software mayu800 beu800 toou800 fast tou800 find errors. cite webu800 title au800 guide tou800 code inspections first jack last ganssle publisher theu800 ganssle group date february 2010 urlu800 accessdate 2010-10u800-05u800 cite webu800 title theu800 impact ofu800 design andu800 code reviews onu800 software quality anu800 empirical study based onu800 pspu800 data first1 cu800u82efu800. last1 kemerer first2 mu800u82ecu800. last2 paulk publisher ieee transactions onu800 software engineering date july-augu800. 2009 urlu800 accessdate 2012-03u800-21u800 industry data indicates that code reviews canu800 accomplish atu800 most anu800 85u800 defect removal rate with anu800 average rate ofu800 about 65u800 . cite webu800 title measuring defect potentials andu800 defect removal efficiency first capers last jones publisher crosstalk theu800 journal ofu800 defense software engineering date june 2008 urlu800 accessdate 2010-10u800-05u800 theu800 types ofu800 defects detected inu800 code reviews have also been studied. based onu800 empirical evidence itu800 seems that upu800 tou800 75u800 ofu800 code review defects affect software evolvability rather than functionality making code reviews anu800 excellent tool foru800 software companies with long product oru800 system life cycles. cite webu800 title what types ofu800 defects areu800 really discovered inu800 code reviews first1 mu800u82evu800. last1 mantyla first2 cu800 last2 lassenius publisher ieee transactions onu800 software engineering date mayu8e28093june 2009 urlu800 accessdate 2012-03u800-21u800 cite webu800 title does theu800 modern code inspection have value first1 hu800. last1 siyu800 first2 lu800. last2 votta publisher ieee proc. international conference ofu800 software maintenance date mayu8e28093june 2001 urlu800 accessdate 2012-03u800-21u800 types types types code review practices fall into three main categories pair programming formal code review andu800 lightweight code review. formal code review such asu800 au800 fagan inspection involves au800 careful andu800 detailed process with multiple participants andu800 multiple phases. formal code reviews areu800 theu800 traditional method ofu800 review inu800 which software developers attend au800 series ofu800 meetings andu800 review code line byu800 line usually using printed copies ofu800 theu800 material. formal inspections areu800 extremely thorough andu800 have been proven effective atu800 finding defects inu800 theu800 code under review. citation needed date march 2012 lightweight code review typically requires less overhead than formal code inspections though itu800 canu800 beu800 equally effective when done properly. citation needed date february 2008 lightweight reviews areu800 often conducted asu800 part ofu800 theu800 normal development process over-theu800-shoulder u8e28093 oneu800 developer looks over theu800 author author'su800 shoulder asu800 theu800 latter walks through theu800 code. email pass-around u8e28093 source code management system emails code tou800 reviewers automatically after checkin isu800 made. pair programming u8e28093 twou800 authors develop code together atu800 theu800 same workstation such isu800 common inu800 extreme programming . tool-assisted code review u8e28093 authors andu800 reviewers useu800 specialized tools designed foru800 peer code review. some ofu800 these mayu800 also beu800 labeled au800 walkthrough informal oru800 critique fast andu800 informal . many teams that eschew traditional formal code review useu800 oneu800 ofu800 theu800 above forms ofu800 lightweight review asu800 part ofu800 their normal development process. au800 code review case study published inu800 theu800 book   best kept secrets ofu800 peer code review   found that lightweight reviews uncovered asu800 many bugs asu800 formal reviews butu800 were faster andu800 more cost-effective. criticism criticism criticism historically formal code reviews have required au800 considerable investment inu800 preparation foru800 theu800 review event andu800 execution time. useu800 ofu800 code analysis tools canu800 support this activity. especially tools that work inu800 theu800 ideu800 asu800 they provide direct feedback tou800 developers ofu800 coding standard compliance. seeu800 also seeu800 also seeu800 also software review software inspection debugging software testing static code analysis performance analysis automated code review list ofu800 tools foru800 code review pair programming references references references reflist ;notes cite book author jason cohen title best kept secrets ofu800 peer code review modern approach. practical advice. publisher smartbearsoftwareu82ecomu800 year 2006 isbn 1u800-59916-067u800-6u800 external links external links external links external links date september 2011 au800 guide tou800 code inspections jack gu800. ganssle article four ways tou800 au800 practical code review lightweight tool support foru800 effective code reviews white paper security code review guidelines category source code category software review category peer review 