 other uses transaction disambiguation about theu800 principles ofu800 transaction processing specific implementations transaction processing system refimprove date november 2012 mergefrom transaction processing system discuss talk transaction processing#merger proposal date november 2012 inu800 computer science  transaction processing  isu800 information processing that isu800 divided into individual indivisible operations called  transactions.  each transaction must succeed oru800 fail asu800 au800 complete unit; itu800 cannot remain inu800 anu800 intermediate state. since most though notu800 necessarily allu800 transaction processing today isu800 interactive theu800 term isu800 often treated asu800 synonymous with   online transaction processing  . description description description transaction processing isu800 designed tou800 maintain au800 database integrity typically au800 database oru800 some modern filesystem filesystems inu800 au800 known consistent state byu800 ensuring that interdependent operations onu800 theu800 system areu800 either allu800 completed successfully oru800 allu800 canceled successfully. foru800 example consider au800 typical banking transaction that involves moving 700u800 from au800 customer customer'su800 savings account tou800 au800 customer customer'su800 checking account. this transaction involves atu800 least twou800 separate operations inu800 computer terms debiting theu800 savings account byu800 700u800 andu800 crediting theu800 checking account byu800 700u800. ifu800 oneu800 operation succeeds butu800 theu800 other does notu800 theu800 books ofu800 theu800 bank will notu800 balance atu800 theu800 endu800 ofu800 theu800 dayu800. there must therefore beu800 au800 wayu800 tou800 ensure that either both operations succeed oru800 both fail sou800 that there isu800 never anyu800 inconsistency inu800 theu800 bank bank'su800 database asu800 au800 whole. transaction processing links multiple individual operations inu800 au800 single indivisible transaction andu800 ensures that either allu800 operations inu800 au800 transaction areu800 completed without error oru800 none ofu800 them areu800. ifu800 some ofu800 theu800 operations areu800 completed butu800 errors occur when theu800 others areu800 attempted theu800 transaction-processing system rolls back  allu800  ofu800 theu800 operations ofu800 theu800 transaction including theu800 successful ones thereby erasing allu800 traces ofu800 theu800 transaction andu800 restoring theu800 system tou800 theu800 consistent known state that itu800 wasu800 inu800 before processing ofu800 theu800 transaction began. ifu800 allu800 operations ofu800 au800 transaction areu800 completed successfully theu800 transaction isu800 commit data management committed byu800 theu800 system andu800 allu800 changes tou800 theu800 database areu800 made permanent; theu800 transaction cannot beu800 rolled back once this isu800 done. transaction processing guards against hardware andu800 software errors that might leave au800 transaction partially completed. ifu800 theu800 computer system crashes inu800 theu800 middle ofu800 au800 transaction theu800 transaction processing system guarantees that allu800 operations inu800 anyu800 uncommitted transactions areu800 cancelled. generally transactions areu800 issued concurrently. ifu800 they overlap iu800u82eeu800. need tou800 touch theu800 same portion ofu800 theu800 database this canu800 create conflicts. foru800 example ifu800 theu800 customer mentioned inu800 theu800 example above hasu800 150u800 inu800 hisu800 savings account andu800 attempts tou800 transfer 100u800 tou800 au800 different person while atu800 theu800 same time moving 100u800 tou800 theu800 checking account only oneu800 ofu800 them canu800 succeed. however forcing transactions tou800 beu800 processed sequentially isu800 inefficient. therefore concurrent implementations ofu800 transaction processing isu800 programmed tou800 guarantee that theu800 endu800 result reflects au800 conflict-free outcome theu800 same asu800 could beu800 reached ifu800 executing theu800 transactions sequentially inu800 anyu800 order au800 property called serializability . inu800 ouru800 example this means that nou800 matter which transaction wasu800 issued first either theu800 transfer tou800 au800 different person oru800 theu800 move tou800 theu800 checking account succeeds while theu800 other oneu800 fails. methodology methodology methodology theu800 basic principles ofu800 allu800 transaction-processing systems areu800 theu800 same. however theu800 terminology mayu800 vary from oneu800 transaction-processing system tou800 another andu800 theu800 terms used below areu800 notu800 necessarily universal. rollback rollback rollback main rollback data management transaction-processing systems ensure database integrity byu800 recording intermediate states ofu800 theu800 database asu800 itu800 isu800 modified then using these records tou800 restore theu800 database tou800 au800 known state ifu800 au800 transaction cannot beu800 committed. foru800 example copies ofu800 information onu800 theu800 database  prior  tou800 itsu800 modification byu800 au800 transaction areu800 setu800 aside byu800 theu800 system before theu800 transaction canu800 make anyu800 modifications this isu800 sometimes called au800  before image  . ifu800 anyu800 part ofu800 theu800 transaction fails before itu800 isu800 committed these copies areu800 used tou800 restore theu800 database tou800 theu800 state itu800 wasu800 inu800 before theu800 transaction began. rollforward rollforward rollforward itu800 isu800 also possible tou800 keep au800 separate journal computing journal ofu800 allu800 modifications tou800 au800 database sometimes called  after images  . this isu800 notu800 required foru800 rollback ofu800 failed transactions butu800 itu800 isu800 useful foru800 updating theu800 database inu800 theu800 event ofu800 au800 database failure sou800 some transaction-processing systems provide itu800. ifu800 theu800 database fails entirely itu800 must beu800 restored from theu800 most recent back-upu800. theu800 back-upu800 will notu800 reflect transactions committed since theu800 back-upu800 wasu800 made. however once theu800 database isu800 restored theu800 journal ofu800 after images canu800 beu800 applied tou800 theu800 database  rollforward  tou800 bring theu800 database upu800 tou800 date. anyu800 transactions inu800 progress atu800 theu800 time ofu800 theu800 failure canu800 then beu800 rolled back. theu800 result isu800 au800 database inu800 au800 consistent known state that includes theu800 results ofu800 allu800 transactions committed upu800 tou800 theu800 moment ofu800 failure. deadlocks deadlocks deadlocks main deadlock inu800 some cases twou800 transactions mayu800 inu800 theu800 course ofu800 their processing attempt tou800 access theu800 same portion ofu800 au800 database atu800 theu800 same time inu800 au800 wayu800 that prevents them from proceeding. foru800 example transaction au800 mayu800 access portion xu800 ofu800 theu800 database andu800 transaction bu800 mayu800 access portion yu800 ofu800 theu800 database. ifu800 atu800 that point transaction au800 then tries tou800 access portion yu800 ofu800 theu800 database while transaction bu800 tries tou800 access portion xu800 au800  deadlock  occurs andu800 neither transaction canu800 move forward. transaction-processing systems areu800 designed tou800 detect these deadlocks when they occur. typically both transactions will beu800 cancelled andu800 rolled back andu800 then they will beu800 started again inu800 au800 different order automatically sou800 that theu800 deadlock doesn'tu800 occur again. oru800 sometimes just oneu800 ofu800 theu800 deadlocked transactions will beu800 cancelled rolled back andu800 automatically restarted after au800 short delay. deadlocks canu800 also occur between three oru800 more transactions. theu800 more transactions involved theu800 more difficult they areu800 tou800 detect tou800 theu800 point that transaction processing systems find there isu800 au800 practical limit tou800 theu800 deadlocks they canu800 detect. compensating transaction compensating transaction compensating transaction inu800 systems where commit andu800 rollback mechanisms areu800 notu800 available oru800 undesirable au800 compensating transaction isu800 often used tou800 undo failed transactions andu800 restore theu800 system tou800 au800 previous state. acid criteria acid criteria acid criteria main acid jimu800 gray computer scientist jimu800 gray defined properties ofu800 au800 reliable transaction system inu800 theu800 late 1970s under theu800 acronym  acid  &mdash; atomicity consistency isolation andu800 durability. cite webu800 last1 gray first1 jimu800 last2 reuter first2 andreas title transaction processing - concepts andu800 techniques powerpoint urlu800 accessdate novu800 12u800 2012 atomicity atomicity atomicity main atomicity database systems au800 transactionu8e28099s changes tou800 theu800 state areu800 atomic either allu800 happen oru800 none happen. these changes include database changes messages andu800 actions onu800 transducers. consistency consistency consistency consistency_ database_systems #consistency consistency au800 transaction isu800 au800 correct transformation ofu800 theu800 state. theu800 actions taken asu800 au800 group dou800 notu800 violate anyu800 ofu800 theu800 integrity constraints associated with theu800 state. isolation isolation isolation even though transactions execute concurrently itu800 appears tou800 each transaction tu800 that others executed either before tu800 oru800 after tu800 butu800 notu800 both. durability durability durability once au800 transaction completes successfully commits itsu800 changes tou800 theu800 state survive failures. benefits benefits benefits transaction processing hasu800 these benefits itu800 allows sharing ofu800 computer resources among many users itu800 shifts theu800 time ofu800 jobu800 processing tou800 when theu800 computing resources areu800 less busy itu800 avoids idling theu800 computing resources without minute-byu800-minute human interaction andu800 supervision itu800 isu800 used onu800 expensive classes ofu800 computers tou800 help amortize theu800 cost byu800 keeping high rates ofu800 utilization ofu800 those expensive resources implementations implementations implementations main transaction processing system standard transaction-processing software notably ibmu800 'su800 information management system wasu800 first developed inu800 theu800 1960s andu800 wasu800 often closely coupled tou800 particular database management system systems. clientu8e28093server model clientu8e28093server computing implemented similar principles inu800 theu800 1980s with mixed success. however inu800 more recent years theu800 distributed clientu8e28093server model hasu800 become considerably more difficult tou800 maintain. asu800 theu800 number ofu800 transactions grew inu800 response tou800 various online services especially theu800 wwwu800 webu800 au800 single distributed database wasu800 notu800 au800 practical solution. inu800 addition most online systems consist ofu800 au800 whole suite ofu800 programs operating together asu800 opposed tou800 au800 strict clientu8e28093server model where theu800 single server could handle theu800 transaction processing. today au800 number ofu800 transaction processing systems areu800 available that work atu800 theu800 inter-program level andu800 which scale tou800 large systems including mainframe computer mainframes . oneu800 well-known citation needed date mayu800 2012 andu800 open industry standard isu800 theu800 xu800 open xau800 xu800 open distributed transaction processing dtpu800 seeu800 also java transaction apiu800 jtau800 theu800 java transaction apiu800 . however proprietary transaction-processing environments such asu800 ibmu800 ibmu800'su800 cics areu800 still very popular citation needed date mayu800 2012 although cics hasu800 evolved tou800 include open industry standards asu800 well. theu800 term ' extreme transaction processing ' xtpu800 hasu800 been used tou800 describe transaction processing systems with uncommonly challenging requirements particularly throughput requirements transactions peru800 second . such systems mayu800 beu800 implemented viau800 distributed oru800 cluster style architectures. seeu800 also seeu800 also seeu800 also processing modes audit trail compensating transaction concurrent programming database transaction twou800-phase commit transaction processing performance council tpcu800 tatp benchmark telecommunication application transaction processing benchmark tatp references references references reflist external references external references external references nuts andu800 bolts ofu800 transaction processing managing transaction processing foru800 sqlu800 database integrity further reading further reading further reading gerhard weikum gottfried vossen  transactional information systems theory algorithms andu800 theu800 practice ofu800 concurrency control andu800 recovery  morgan kaufmann 2002 isbn 1u800-55860-508u800-8u800 jimu800 gray computer scientist jimu800 gray andreas reuter transaction processing&nbsp;u8e28094 concepts andu800 techniques 1993 morgan kaufmann isbn 1u800-55860-190u800-2u800 philip au800. bernstein eric newcomer principles ofu800 transaction processing 1997 morgan kaufmann isbn 1u800-55860-415u800-4u800 ahmed ku800. elmagarmid editor transaction models foru800 advanced database applications morgan-kaufmann 1992 isbn 1u800-55860-214u800-3u800 databases defaultsort transaction processing category transaction processing category fault-tolerant computer systems nlu800 transactie dataopslag #uitleg 