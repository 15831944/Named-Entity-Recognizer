 about theu800 computational technique theu800 tbnu800 game show virtual memory game show merge from virtual address space date august 2012 discuss talk virtual address space #merge proposal more footnotes date december 2010 file virtual memoryu82esvgu800 thumb 250px virtual memory combines active ramu800 andu800 inactive memory onu800 direct access storage device dasd early systems used drum memory drums ; contemporary systems useu800 disk storage disks oru800 solid-state drive solid state memory tou800 form au800 large range ofu800 contiguous addresses. inu800 computing virtual memory isu800 au800 memory management technique that isu800 implemented using both hardware andu800 software. itu800 maps memory address addresses used byu800 au800 program called   virtual address space virtual addresses   into  physical addresses  inu800 computer memory. main storage#primary_storage main storage asu800 seen byu800 au800 process oru800 task appears asu800 au800 contiguous address space oru800 collection ofu800 contiguous memory segmentation segments . theu800 operating system manages virtual address spaces andu800 theu800 assignment ofu800 real memory tou800 virtual memory. address translation hardware inu800 theu800 cpuu800 often referred tou800 asu800 au800 memory management unit oru800  mmuu800  automatically translates virtual addresses tou800 physical addresses. software within theu800 operating system mayu800 extend these capabilities tou800 provide au800 virtual address space that canu800 exceed theu800 capacity ofu800 real memory andu800 thus reference more memory than isu800 physically present inu800 theu800 computer. theu800 primary benefits ofu800 virtual memory include freeing applications from having tou800 manage au800 shared memory space increased security dueu800 tou800 memory isolation andu800 being able tou800 conceptually useu800 more memory than might beu800 physically available using theu800 technique ofu800 paging . properties properties properties virtual memory makes application programming easier byu800 hiding fragmentation computer fragmentation ofu800 physical memory; byu800 delegating tou800 theu800 kernel theu800 burden ofu800 managing theu800 computer data storage#hierarchy ofu800 storage memory hierarchy eliminating theu800 need foru800 theu800 program tou800 handle overlay programming overlays explicitly ; andu800 when each process isu800 runu800 inu800 itsu800 ownu800 dedicated address space byu800 obviating theu800 need relocation computer science tou800 relocate program code oru800 tou800 access memory with addressing mode#pcu800-relative relative addressing . memory virtualization canu800 beu800 considered au800 generalization ofu800 theu800 concept ofu800 virtual memory. usage usage usage virtual memory isu800 anu800 integral part ofu800 au800 modern computer architecture ; implementations require hardware support typically inu800 theu800 form ofu800 au800 memory management unit built into theu800 central processing unit cpuu800 . while notu800 necessary emulators andu800 virtual machine machines canu800 employ hardware support tou800 increase performance ofu800 their virtual memory implementations. cite webu800 title amdu800-vu8e284a2 nested paging urlu800 publisher amdu800 accessdate 11u800 mayu800 2012 consequently older operating systems such asu800 those foru800 theu800 mainframe computer mainframes ofu800 theu800 1960s andu800 those foru800 personal computers ofu800 theu800 early tou800 midu800-1980s eu800u82egu800. dosu800 cite webu800 urlu800 title windows version history accessdate 2008-12u800-03u800 publisher microsoft date last review july 19u800 2005 generally have nou800 virtual memory functionality dubious prevalence ofu800 virtual memory operating systems inu800 theu800 1960s andu800 early 1970s reason au800 lotu800 ofu800 paging computers were shipped inu800 theu800 1960 date november 2010 though notable exceptions foru800 mainframes ofu800 theu800 1960s include theu800 atlas supervisor foru800 theu800 atlas computer atlas burroughs mcpu800 mcpu800 foru800 theu800 burroughs corporation burroughs b5000 michigan terminal system mtsu800 tssu800 360u800 andu800 cpu800 cmsu800 foru800 theu800 ibmu800 system 360u800 model 67u800 multics foru800 theu800 geu800-600u800 series geu800 645u800 theu800 time sharing operating system foru800 theu800 rcau800 spectra 70u800 46u800 theu800 apple lisa isu800 anu800 example ofu800 au800 personal computer ofu800 theu800 1980s that features virtual memory. most modern operating systems that support virtual memory also runu800 each process computing process inu800 itsu800 ownu800 dedicated address space . each program thus appears tou800 have sole access tou800 theu800 virtual memory. however some older operating systems such asu800 osu800 vs1u800 andu800 osu800 vs2u800 svsu800 osu800 vs2u800 svsu800 andu800 even modern ones such asu800 ibmu800 iu800 areu800 single address space operating system systems that runu800 allu800 processes inu800 au800 single address space composed ofu800 virtualized memory. embedded system systems andu800 other special-purpose computer systems that require very fast andu800 oru800 very consistent response times mayu800 optu800 notu800 tou800 useu800 virtual memory dueu800 tou800 decreased deterministic algorithm determinism ; virtual memory systems trigger unpredictable trap computing traps that mayu800 produce unwanted jitter during input output iu800 ou800 operations . this isu800 because embedded hardware costs areu800 often kept lowu800 byu800 implementing allu800 such operations with software au800 technique called bitu800-banging rather than with dedicated hardware. history history history inu800 theu800 1940s andu800 1950s allu800 larger programs hadu800 tou800 contain logic foru800 managing primary andu800 secondary storage such asu800 overlay programming overlaying . virtual memory wasu800 therefore introduced notu800 only tou800 extend primary memory butu800 tou800 make such anu800 extension asu800 easy asu800 possible foru800 programmers tou800 useu800. cite journal authorlink peter ju800. denning last denning first peter title before memory wasu800 virtual journal inu800 theu800 beginning recollections ofu800 software pioneers year 1997 urlu800 format pdfu800 tou800 allow foru800 multiprogramming andu800 computer multitasking multitasking many early systems divided memory between multiple programs without virtual memory such asu800 early models ofu800 theu800 pdpu800-10u800 viau800 processor register registers . theu800 concept ofu800 virtual memory wasu800 developed byu800 german physicist fritz-rudolf gu8c3bcntsch atu800 theu800 technische universitu8c3a4t berlin inu800 1956. eu800. jessen  origin ofu800 theu800 virtual memory concept.  ieee annals ofu800 theu800 history ofu800 computing . volu800. 26u800. 4u800 2004 page 71u800 ffu800. cite journal article springerlink 10u800u82e1007 s002870050034 last jessen first eike title dieu800 entwicklung desu800 virtuellen speichers journal informatik-spektrum publisher springer berlin heidelberg issn 0170-6012 pages 216u8e28093219 volume 19u800 issue 4u800 urlu800 note 10u800u82e1007 s002870050034 year 1996 language german doiu800 10u800u82e1007 s002870050034 paging wasu800 first developed atu800 theu800 university ofu800 manchester asu800 au800 wayu800 tou800 extend theu800 atlas computer 'su800 working memory byu800 combining itsu800 16u800 thousand words ofu800 primary magnetic core memory core memory with anu800 additional 96u800 thousand words ofu800 secondary drum memory . theu800 first atlas wasu800 commissioned inu800 1962 butu800 working prototypes ofu800 paging hadu800 been developed byu800 1959. rpu800 page 2u800 ru800. ju800. creasy theu800 origin ofu800 theu800 vmu800 370u800 time-sharing system  ibmu800 journal ofu800 research & development  volu800. 25u800 nou800. 5u800 september 1981  pu800.  486u800 atlas design includes virtual memory inu800 1961 theu800 burroughs corporation independently released theu800 first commercial computer with virtual memory theu800 b5000 with segmentation memory segmentation rather than paging. ianu800 joyner onu800 burroughs b5000 cite book first harvey gu800. last cragon title memory systems andu800 pipelined processors publisher jones andu800 bartlett publishers page 113u800 year 1996 urlu800 isbn 0u800-86720-474u800-5u800 before virtual memory could beu800 implemented inu800 mainstream operating systems many problems hadu800 tou800 beu800 addressed. dynamic address translation required expensive andu800 difficult tou800 build specialized hardware; initial implementations slowed down access tou800 memory slightly. there were worries that newu800 system-wide algorithms utilizing secondary storage would beu800 less effective than previously used application-specific algorithms. byu800 1969 theu800 debate over virtual memory foru800 commercial computers wasu800 over; anu800 ibmu800 research team ledu800 byu800 david sayre showed that their virtual memory overlay system consistently worked better than theu800 best manually controlled systems. citation needed date july 2011 theu800 first minicomputer tou800 introduce virtual memory wasu800 theu800 norwegian nord-1u800 ; during theu800 1970s other minicomputers implemented virtual memory notably vaxu800 models running openvms vmsu800 . virtual memory wasu800 introduced tou800 theu800 x86u800 architecture with theu800 protected mode ofu800 theu800 intel 80286 processor butu800 itsu800 segment swapping technique scaled poorly tou800 larger segment sizes. theu800 intel 80386 introduced paging support underneath theu800 existing segmentation memory segmentation layer enabling theu800 page fault exception tou800 chain with other exceptions without double fault . however loading segment descriptors wasu800 anu800 expensive operation causing operating system designers tou800 rely strictly onu800 paging rather than au800 combination ofu800 paging andu800 segmentation. paged virtual memory paged virtual memory paged virtual memory refimprove section date december 2010 nearly allu800 implementations ofu800 virtual memory divide au800 virtual address space into page computer memory page pages blocks ofu800 contiguous virtual memory addresses. pages areu800 usually atu800 least 4u800 kilobyte kilobytes inu800 size; systems with large virtual address ranges oru800 amounts ofu800 real memory generally useu800 larger page sizes. page tables page tables page tables page table tables areu800 used tou800 translate theu800 virtual addresses seen byu800 theu800 application into physical address addresses used byu800 theu800 hardware tou800 process instructions; such hardware that handles this specific translation isu800 often known asu800 theu800 memory management unit . each entry inu800 theu800 page table holds au800 flag indicating whether theu800 corresponding page isu800 inu800 real memory oru800 notu800. ifu800 itu800 isu800 inu800 real memory theu800 page table entry will contain theu800 real memory address atu800 which theu800 page isu800 stored. when au800 reference isu800 made tou800 au800 page byu800 theu800 hardware ifu800 theu800 page table entry foru800 theu800 page indicates that itu800 isu800 notu800 currently inu800 real memory theu800 hardware raises au800 page fault trap computing exception invoking theu800 paging supervisor component ofu800 theu800 operating system . systems canu800 have oneu800 page table foru800 theu800 whole system separate page tables foru800 each application andu800 segment au800 tree ofu800 page tables foru800 large segments oru800 some combination ofu800 these. ifu800 there isu800 only oneu800 page table different applications multiprogramming running atu800 theu800 same time useu800 different parts ofu800 au800 single range ofu800 virtual addresses. ifu800 there areu800 multiple page oru800 segment tables there areu800 multiple virtual address spaces andu800 concurrent applications with separate page tables redirect tou800 different real addresses. paging supervisor paging supervisor paging supervisor this part ofu800 theu800 operating system creates andu800 manages page tables. ifu800 theu800 hardware raises au800 page fault exception theu800 paging supervisor accesses secondary storage returns theu800 page that hasu800 theu800 virtual address that resulted inu800 theu800 page fault updates theu800 page tables tou800 reflect theu800 physical location ofu800 theu800 virtual address andu800 tells theu800 translation mechanism tou800 restart theu800 request. when allu800 physical memory isu800 already inu800 useu800 theu800 paging supervisor must free au800 page inu800 primary storage tou800 hold theu800 swapped-inu800 page. theu800 supervisor uses oneu800 ofu800 au800 variety ofu800 page replacement algorithm algorithms such asu800 page replacement algorithm#least recently used least recently used tou800 determine which page tou800 free. pinned pages pinned pages pinned pages operating systems have memory areas that areu800  pinned  never swapped tou800 secondary storage . other terms used areu800  locked   fixed  oru800  wired  pages. foru800 example interrupt mechanisms rely onu800 anu800 array ofu800 pointers tou800 their handlers such asu800 iu800 ou800 completion andu800 page fault . ifu800 theu800 pages containing these pointers oru800 theu800 code that they invoke were pageable interrupt-handling would become faru800 more complex andu800 time-consuming particularly inu800 theu800 case ofu800 page fault interruptions. hence some part ofu800 theu800 page table structures isu800 notu800 pageable. some pages mayu800 beu800 pinned foru800 short periods ofu800 time others mayu800 beu800 pinned foru800 long periods ofu800 time andu800 still others mayu800 need tou800 beu800 permanently pinned. foru800 example theu800 paging supervisor code andu800 drivers foru800 secondary storage devices onu800 which pages reside must beu800 permanently pinned asu800 otherwise paging wouldn'tu800 even work because theu800 necessary code wouldn'tu800 beu800 available. timing-dependent components mayu800 beu800 pinned tou800 avoid variable paging delays. data buffer buffers that areu800 accessed directly byu800 peripheral devices that useu800 direct memory access oru800 iu800 ou800 channel channels must reside inu800 pinned pages while theu800 iu800 ou800 operation isu800 inu800 progress because such devices andu800 theu800 busu800 computing buses tou800 which they areu800 attached expect tou800 find data buffers located atu800 physical memory addresses; regardless ofu800 whether theu800 busu800 hasu800 au800 iommu memory management unit foru800 iu800 ou800 transfers cannot beu800 stopped ifu800 au800 page fault occurs andu800 then restarted when theu800 page fault hasu800 been processed. inu800 ibmu800 ibmu800'su800 operating systems foru800 system 370u800 andu800 successor systems theu800 term isu800 fixed andu800 pages mayu800 beu800 long-term fixed oru800 mayu800 beu800 short-term fixed. control structures areu800 often long-term fixed measured inu800 wall-clock time iu800u82eeu800. time measured inu800 seconds rather than time measured inu800 less than oneu800 second intervals whereas iu800 ou800 buffers areu800 usually short-term fixed usually measured inu800 significantly less than wall-clock time possibly foru800 au800 fewu800 milliseconds . indeed theu800 osu800 hasu800 au800 special facility foru800 fast fixing these short-term fixed data buffers fixing which isu800 performed without resorting tou800 au800 time-consuming supervisor call instruction . additionally theu800 osu800 hasu800 yetu800 another facility foru800 converting anu800 application from being long-term fixed tou800 being fixed foru800 anu800 indefinite period possibly foru800 days months oru800 even years however this facility implicitly requires that theu800 application firstly beu800 swapped-outu800 possibly from preferred-memory oru800 au800 mixture ofu800 preferred- andu800 nonu800-preferred memory andu800 secondly beu800 swapped-inu800 tou800 nonu800-preferred memory where itu800 resides foru800 theu800 duration however long that might beu800; this facility utilizes au800 documented supervisor call instruction . multics used theu800 term wired . openvms andu800 microsoft windows windows refer tou800 pages temporarily made nonpageable asu800 foru800 iu800 ou800 buffers asu800 locked andu800 simply nonpageable foru800 those that areu800 never pageable. virtual-real operation virtual-real operation virtual-real operation inu800 osu800 vs1u800 andu800 similar oses some parts ofu800 systems memory areu800 managed inu800 virtual-real mode where every virtual address corresponds tou800 theu800 same real address specifically interrupt mechanisms paging supervisor andu800 tables inu800 older systems andu800 application programs using nonu800-standard iu800 ou800 management. foru800 example ibmu800 ibmu800'su800 zu800 osu800 hasu800 3u800 modes virtual-virtual virtual-real andu800 virtual-fixed . cite webu800 title zu800 osu800 basic skills information center zu800 osu800 concepts urlu800 format pdfu800 page needed date september 2010 thrashing thrashing thrashing when paging isu800 used au800 problem called thrashing computer science thrashing canu800 occur inu800 which theu800 computer spends anu800 unsuitably large amount ofu800 time swapping pages tou800 andu800 from au800 backing store hence slowing down useful work. theu800 phenomena isu800 associated with theu800 concept ofu800 au800 working setu800 which isu800 theu800 minimum setu800 ofu800 pages that should beu800 inu800 memory inu800 order foru800 useful progress tou800 beu800 made inu800 au800 task. thrashing occurs when there isu800 insufficient memory available tou800 store theu800 working sets ofu800 allu800 active programs. adding real memory isu800 theu800 simplest response butu800 improving application design scheduling andu800 memory usage canu800 help. another solution isu800 tou800 reduce theu800 number ofu800 active tasks onu800 theu800 system. this reduces demand onu800 real memory byu800 swapping outu800 theu800 entire working setu800 ofu800 oneu800 oru800 more processes. segmented virtual memory segmented virtual memory segmented virtual memory some systems such asu800 theu800 burroughs corporation burroughs b5500 cite manual author burroughs idu800 1021326 title burroughs b5500 information processing system reference manual useu800 segmentation memory segmentation instead ofu800 paging dividing virtual address spaces into variable-length segments. au800 virtual address here consists ofu800 au800 segment number andu800 anu800 offset within theu800 segment. theu800 intel 80286 supports au800 similar segmentation scheme asu800 anu800 option butu800 itu800 isu800 rarely used. segmentation andu800 paging canu800 beu800 used together byu800 dividing each segment into pages; systems with this memory structure such asu800 multics andu800 ibmu800 system 38u800 areu800 usually paging-predominant segmentation providing memory protection. cite book urlu800 format pdfu800 title geu800-645u800 system manual pages 21u8e2809330 month january year 1968 accessdate 2007-11u800-13u800 cite webu800 author fernando ju800. corbatu8c3b3 corbatu8c3b3 fu800u82eju800. ; andu800 victor au800. vyssotsky vyssotsky vu800. au800. title introduction andu800 overview ofu800 theu800 multics system urlu800 accessdate 2007-11u800-13u800 cite webu800 author glaser edward lu800.; couleur john fu800.; andu800 oliver gu800. au800. title system design ofu800 au800 computer foru800 time sharing applications urlu800 inu800 theu800 intel 80386 andu800 later iau800-32u800 processors theu800 segments reside inu800 au800 32u800-bitu800 linear paged address space. segments canu800 beu800 moved inu800 andu800 outu800 ofu800 that space; pages there canu800 page inu800 andu800 outu800 ofu800 main memory providing twou800 levels ofu800 virtual memory; fewu800 ifu800 anyu800 operating systems dou800 sou800 instead using only paging. early nonu800-hardware-assisted x86u800 virtualization solutions combined paging andu800 segmentation because x86u800 paging offers only twou800 protection domains whereas au800 vmmu800 guest osu800 guest applications stack needs three. ju800. eu800. smith ru800. uhlig august 14u800 2005  virtual machines architectures implementations andu800 applications  hotchips 17u800 tutorial 1u800 part 2u800 rpu800 22u800 theu800 difference between paging andu800 segmentation systems isu800 notu800 only about memory division; segmentation isu800 visible tou800 user processes asu800 part ofu800 memory model semantics. hence instead ofu800 memory that looks like au800 single large space itu800 isu800 structured into multiple spaces. this difference hasu800 important consequences; au800 segment isu800 notu800 au800 page with variable length oru800 au800 simple wayu800 tou800 lengthen theu800 address space. segmentation that canu800 provide au800 single-level memory model inu800 which there isu800 nou800 differentiation between process memory andu800 file system consists ofu800 only au800 list ofu800 segments files mapped into theu800 process process'su800 potential address space. cite journal last bensoussan first andru8c3a9 last2 clingen first2 charlest. last3 daley first3 robert cu800. date mayu800 1972 title theu800 multics virtual memory concepts andu800 design journal communications ofu800 theu800 acmu800 volume 15u800 issue 5u800 pages 308u8e28093318 urlu800 doiu800 10u800u82e1145 355602u82e361306 this isu800 notu800 theu800 same asu800 theu800 mechanisms provided byu800 calls such asu800 mmap andu800 win32 'su800 mapviewoffile because inter-file pointers dou800 notu800 work when mapping files into semi-arbitrary places. inu800 multics au800 file oru800 au800 segment from au800 multi-segment file isu800 mapped into au800 segment inu800 theu800 address space sou800 files areu800 always mapped atu800 au800 segment boundary. au800 file file'su800 linkage section canu800 contain pointers foru800 which anu800 attempt tou800 load theu800 pointer into au800 register oru800 make anu800 indirect reference through itu800 causes au800 trap. theu800 unresolved pointer contains anu800 indication ofu800 theu800 name ofu800 theu800 segment tou800 which theu800 pointer refers andu800 anu800 offset within theu800 segment; theu800 handler foru800 theu800 trap maps theu800 segment into theu800 address space puts theu800 segment number into theu800 pointer changes theu800 tagu800 field inu800 theu800 pointer sou800 that itu800 nou800 longer causes au800 trap andu800 returns tou800 theu800 code where theu800 trap occurred reu800-executing theu800 instruction that caused theu800 trap. cite webu800 title multics execution environment urlu800 this eliminates theu800 need foru800 au800 linker computing linker completely andu800 works when different processes mapu800 theu800 same file into different places inu800 their private address spaces. cite book first elliott iu800. last organick title theu800 multics system anu800 examination ofu800 itsu800 structure publisher mitu800 press year 1972 isbn 0u800-262u800-15012-3u800 seeu800 also seeu800 also seeu800 also wikisource theu800 paging game computer memory memory address address space virtual address space cpuu800 design page computing page table paging working setu800 memory management unit cache algorithms page replacement algorithm segmentation memory system 38u800 memory management memory allocation protected mode anu800 x86u800 architecture x86u800 mode that allows foru800 virtual memory. cuda pinned memory further reading further reading further reading hennessy john lu800.; andu800 patterson david au800.;  computer architecture au800 quantitative approach  isbn 1u800-55860-724u800-2u800 notes notes notes reflist group nbu800 references references references foldoc reflist 2u800 external links external links external links time-sharing supervisor programs byu800 michael tu800. alexander inu800  advanced topics inu800 systems programming  university ofu800 michigan engineering summer conference 1970 revised mayu800 1971 compares theu800 scheduling andu800 resource allocation approaches including virtual memory andu800 paging used inu800 four mainframe operating systems cpu800-67u800 tssu800 360u800 michigan terminal system mtsu800 andu800 multics . linuxmm linux memory management . birth ofu800 linux kernel mailing list discussion. wayback urlu800 title theu800 virtual-memory manager inu800 windows ntu800 randy kath microsoft developer network technology group 12u800 december 1992 date 20100622062522 memory management navbox defaultsort virtual memory category virtual memory category school ofu800 computer science university ofu800 manchester 